{"version":3,"file":"static/js/8798.e8ff1ead.chunk.js","mappings":"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","sources":["Component/NoData/index.js","Pages/Card/Card.js","Pages/Card/index.js","Redux/OrganizationSetup/api.js","Redux/OrganizationSetup/action.js","Redux/OrganizationSetup/thunk.js"],"sourcesContent":["import React from \"react\";\nimport { FaPlus } from \"react-icons/fa\";\nimport Tooltip from \"../Tooltip/Tooltip\";\n\nconst index = ({ search, onClick, addPermission }) => {\n  \n  return (\n    <div className=\"card w-50 p-5 text-center justify-content-center no-data\">\n      <h4 className=\"fw-normal mb-3\">No data to Display</h4>\n      {!search && addPermission && (\n        <h6>\n          Please Add Data <br />\n          <Tooltip content=\"Add\">\n            <button\n              onClick={onClick}\n              className=\"btn btn-primary btn-md mx-2 px-3 py-1 mt-3\"\n            >\n              <FaPlus className=\"nodata-icon\" size={20} /> Add\n            </button>\n          </Tooltip>{\" \"}\n        </h6>\n      )}\n    </div>\n  );\n};\n\nexport default index;\n","import React, { useState } from \"react\";\nimport { FaEye } from \"react-icons/fa\";\nimport \"./Card.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  getParticularPage,\n  getPrevious,\n  getNext,\n  editCardRequest,\n} from \"../../Redux/Card/thunk\";\n\nimport PaginationBlock from \"../../Component/PaginationBlock\";\nimport NoData from \"../../Component/NoData\";\nimport Tooltip from \"../../Component/Tooltip/Tooltip\";\nimport { getOrganizationSetup } from \"../../Redux/OrganizationSetup/thunk\";\nimport { clearEditCardSuccessAction } from \"../../Redux/Card/actions\";\n\nconst Card = ({\n  currentPage,\n  postsPerPage,\n  setCurrentPage,\n  count,\n  setShowModal,\n  maxPageNumberLimit,\n  setMaxPageNumberLimit,\n  minPageNumberLimit,\n  setMinPageNumberLimit,\n  // setShowViewModal,\n  search,\n}) => {\n  // props\n  const permissions = useSelector((state) => state.auth.permissions);\n  const isAdmin = useSelector((state) => state.auth.isAdmin);\n  const isSuperuser = useSelector((state) => state.auth.isSuperuser);\n  const cards = useSelector((state) => state.card.cards);\n  const next = useSelector((state) => state.card.next);\n  const previous = useSelector((state) => state.card.previous);\n  const dispatch = useDispatch();\n\n  // for pagination\n  const [pageNumberLimit] = useState(5);\n\n  //change page\n  const paginate = (number) => {\n    dispatch(getParticularPage({ number, postsPerPage }));\n    setCurrentPage(number);\n  };\n\n  //handle Click\n  const handleClick = (type) => {\n    if (type === \"previous\") {\n      dispatch(getPrevious(previous));\n      setCurrentPage((prevState) => prevState - 1);\n      if ((currentPage - 1) % pageNumberLimit === 0) {\n        setMaxPageNumberLimit(maxPageNumberLimit - pageNumberLimit);\n        setMinPageNumberLimit(minPageNumberLimit - pageNumberLimit);\n      }\n    } else if (type === \"next\") {\n      dispatch(getNext(next));\n      setCurrentPage((prevState) => prevState + 1);\n      if (currentPage + 1 > maxPageNumberLimit) {\n        setMaxPageNumberLimit(maxPageNumberLimit + pageNumberLimit);\n        setMinPageNumberLimit(minPageNumberLimit + pageNumberLimit);\n      }\n    }\n  };\n\n  //pagination end\n\n  const handleView = async (id) => {\n    await dispatch(editCardRequest(id));\n    setShowModal(true);\n  };\n\n  const viewPermission =\n    permissions.includes(\"can_read_entrypass\") || isAdmin || isSuperuser;\n\n  const addPermission = permissions.includes(\"can_create_entrypass\");\n\n  return (\n    <>\n      {cards?.length > 0 ? (\n        <div className=\"mt-2\">\n          <div className=\"table-scrollable\">\n            <table className=\"table table-hover table-bordered text-center\">\n              <thead>\n                <tr>\n                  <th style={{ width: \"2%\" }}>S.N</th>\n                  <th className=\"text-left\">Name</th>\n                  <th className=\"text-left\">Email</th>\n                  <th className=\"text-left\">Citizenship No</th>\n                  <th className=\"text-left\">Mobile</th>\n                  <th className=\"text-left\">DOB BS</th>\n                  <th className=\"text-left\">Office</th>\n                  <th className=\"text-left\">Reference</th>\n                  <th>Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {cards?.length > 0 &&\n                  cards.map((detail, i) => {\n                    const {\n                      id,\n                      fullName,\n                      email,\n                      citizenshipNumber,\n                      mobileNumber,\n                      submissionNumber,\n                      dobBs,\n                      office,\n                    } = detail;\n\n                    return (\n                      <tr key={id}>\n                        <td className=\"fw-bold\" style={{ width: \"2%\" }}>\n                          {postsPerPage * (currentPage - 1) + (i + 1)}{\" \"}\n                        </td>\n\n                        <td className=\"text-left\">{fullName}</td>\n                        <td\n                          className=\"text-left\"\n                          style={{ wordBreak: \"break-all\" }}\n                        >\n                          {email !== \"\" ? email : \"N/A\"}\n                        </td>\n                        <td className=\"text-left\">\n                          {citizenshipNumber === null\n                            ? \"N/A\"\n                            : citizenshipNumber}\n                        </td>\n                        <td className=\"text-left\">{mobileNumber}</td>\n                        <td className=\"text-left\">{dobBs}</td>\n                        <td className=\"text-left\">{office?.name}</td>\n                        <td className=\"text-left\">{submissionNumber}</td>\n\n                        <td>\n                          {viewPermission && (\n                            <Tooltip content=\"View Detail\">\n                              <button\n                                onClick={() => handleView(id)}\n                                className=\"btn btn-md btn-edit btn-primary mx-1\"\n                              >\n                                <FaEye size={16} />\n                              </button>\n                            </Tooltip>\n                          )}\n                        </td>\n                      </tr>\n                    );\n                  })}\n              </tbody>\n            </table>\n          </div>\n          {count > 0 && (\n            <PaginationBlock\n              currentPage={currentPage}\n              postsPerPage={postsPerPage}\n              count={count}\n              paginate={paginate}\n              handleClick={handleClick}\n              setCurrentPage={setCurrentPage}\n              minPageNumberLimit={minPageNumberLimit}\n              maxPageNumberLimit={maxPageNumberLimit}\n            />\n          )}\n        </div>\n      ) : (\n        <NoData\n          search={search}\n          onClick={() => {\n            dispatch(clearEditCardSuccessAction());\n            dispatch(getOrganizationSetup());\n            setShowModal(true);\n          }}\n          addPermission={addPermission}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Card;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Card.css\";\nimport { defaultLimit } from \"../../utils/defaultLimit\";\nimport {\n  cardClearData,\n  getCardRequest,\n  handleSearch,\n} from \"../../Redux/Card/thunk\";\nimport ListingSkeleton from \"../../Component/Skeleton/ListingSkeleton\";\nimport PaginationLimit from \"../../Component/Pagination/PaginationLimit\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { FaPlus } from \"react-icons/fa\";\nimport Tooltip from \"../../Component/Tooltip/Tooltip\";\nimport Card from \"./Card\";\nimport CreateCard from \"./CreateCard\";\nimport Modal from \"../../Component/Modal\";\nimport { clearEditCardSuccessAction } from \"../../Redux/Card/actions\";\nimport { getOrganizationSetup } from \"../../Redux/OrganizationSetup/thunk\";\n\nconst CardListing = () => {\n  const loading = useSelector((state) => state.card.loading);\n  const loadingUpdate = useSelector((state) => state.card.loadingUpdate);\n  const loadingCreate = useSelector((state) => state.card.loadingCreate);\n  const loadingReject = useSelector((state) => state.card.loadingReject);\n  const permissions = useSelector((state) => state.auth.permissions);\n  const isSuperuser = useSelector((state) => state.auth.isSuperuser);\n\n  const count = useSelector((state) => state.card.count);\n  const card = useSelector((state) => state.card.card);\n  const cards = useSelector((state) => state.card.cards);\n  const edit = useSelector((state) => state.card.edit);\n  const editDetails = useSelector((state) => state.card.editDetails);\n  const search = useSelector((state) => state.search.search);\n\n  const [showModal, setShowModal] = useState(false);\n\n  const [verifyCard, setVerifyCard] = useState(false);\n  // const [editForm, setEditForm] = useState(edit ? true : false);\n\n  const [showSignatureModal, setShowSignatureModal] = useState(false);\n  const [signatures, setSignatures] = useState([\"\"]);\n  const [signaturesText, setSignaturesText] = useState([\"\"]);\n\n  const dispatch = useDispatch();\n\n  // for pagination\n  const [currentPage, setCurrentPage] = useState(1);\n  const [maxPageNumberLimit, setMaxPageNumberLimit] = useState(5);\n  const [minPageNumberLimit, setMinPageNumberLimit] = useState(0);\n  const [postsPerPage, setPostsPerPage] = useState(10);\n\n  //pagination end\n  //loading all the food\n  useEffect(() => {\n    if (postsPerPage === 0) {\n      if (search === \"\") {\n        dispatch(getCardRequest(count));\n      } else {\n        dispatch(handleSearch(search, count));\n      }\n    } else {\n      if (search === \"\") {\n        if (postsPerPage === defaultLimit) {\n          dispatch(getCardRequest(postsPerPage));\n        } else {\n          setCurrentPage(1);\n          dispatch(getCardRequest(postsPerPage));\n        }\n      } else {\n        setCurrentPage(1);\n        setMaxPageNumberLimit(5);\n        setMinPageNumberLimit(0);\n        dispatch(handleSearch(search, postsPerPage));\n      }\n    }\n  }, [dispatch, postsPerPage, search]);\n  const addPermission = permissions.includes(\"can_create_entrypass\");\n  return (\n    <>\n      <div className=\"user-card\">\n        <div className=\"header-content\">\n          <h4 className=\"mb-sm-0 fw-normal\">Pass Request Listing</h4>\n        </div>\n        <div\n          className={`${cards?.length > 0 ? \"office-card-body\" : \"card-body\"}`}\n        >\n          <div className=\"row m-0 p-0\">\n            {cards?.length > 0 && (\n              <>\n                <div className=\"col-6\">\n                  <PaginationLimit\n                    postsPerPage={postsPerPage}\n                    setPostsPerPage={setPostsPerPage}\n                  />\n                </div>\n\n                <div className=\"col-6 text-right\">\n                  {addPermission && (\n                    <Tooltip content=\"Add\">\n                      <button\n                        className=\"btn btn-primary waves-effect waves-light btn-sm float-end\"\n                        onClick={() => {\n                          dispatch(clearEditCardSuccessAction());\n                          dispatch(getOrganizationSetup());\n                          setShowModal(true);\n                        }}\n                      >\n                        <FaPlus className=\"mb-1\" />\n                        &nbsp;Add\n                      </button>\n                    </Tooltip>\n                  )}\n                </div>\n              </>\n            )}\n          </div>\n          {loading ? (\n            <ListingSkeleton />\n          ) : (\n            <Card\n              currentPage={currentPage}\n              setCurrentPage={setCurrentPage}\n              postsPerPage={postsPerPage}\n              setPostsPerPage={setPostsPerPage}\n              count={count}\n              showModal={showModal}\n              setShowModal={setShowModal}\n              maxPageNumberLimit={maxPageNumberLimit}\n              setMaxPageNumberLimit={setMaxPageNumberLimit}\n              minPageNumberLimit={minPageNumberLimit}\n              setMinPageNumberLimit={setMinPageNumberLimit}\n              search={search}\n            />\n          )}\n\n          {showModal && (\n            <Modal\n              header={editDetails ? \"Update User Info\" : \"User Info\"}\n              types={\"card\"}\n              size={\"modal-xl\"}\n              setShowModal={setShowModal}\n              showModal={showModal}\n              edit={edit}\n              clearAction={cardClearData}\n            >\n              <CreateCard\n                setShowModal={setShowModal}\n                showModal={showModal}\n                edit={edit}\n                editDetails={editDetails}\n                currentPage={currentPage}\n                postsPerPage={postsPerPage}\n                showSignatureModal={showSignatureModal}\n                setShowSignatureModal={setShowSignatureModal}\n                setSignatures={setSignatures}\n                setSignaturesText={setSignaturesText}\n                verifyCard={verifyCard}\n                setVerifyCard={setVerifyCard}\n                signatures={signatures}\n                masterData={card}\n                loading={loading}\n                loadingCreate={loadingCreate}\n                loadingUpdate={loadingUpdate}\n                loadingReject={loadingReject}\n                type={\"card\"}\n              />\n            </Modal>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default CardListing;\n","import axiosInstance from \"../../utils/axios\";\n\n//obtaining the paginated data\nexport const getOrganizationSetup = () =>\n  axiosInstance.get(`api/v1/core-app/org-rule?offset=0&limit=0&ordering=-id`);\n\nexport const getOrganization = () =>\n  axiosInstance.get(`api/v1/core-app/organization-setup/list?limit=0`);\n//creating function\nexport const createOrganizationSetup = (body) =>\n  axiosInstance.post(`api/v1/core-app/org-rule`, body);\n\n//update function\nexport const updateOrganizationSetup = (id, body) =>\n  axiosInstance.patch(`api/v1/core-app/org-rule/${id}`, body);\n\n//searching function\nexport const handleSearch = (search, postsPerPage) =>\n  axiosInstance.get(\n    `api/v1/core-app/org-rule?offset=0&limit=${postsPerPage}&search=${search}`\n  );\n","import { organizationSetupConstants } from \"./constants\";\n// actions\nexport const loadingAction = () => ({\n  type: organizationSetupConstants.LOADING_ORGANIZATION_SETUP,\n});\nexport const loadingUpdatedAction = () => ({\n  type: organizationSetupConstants.LOADING_UPDATED,\n});\n\nexport const loadingOrganization = () => ({\n  type: organizationSetupConstants.LOADING_ORGANIZATION,\n});\nexport const getOrganizationSetupSuccessAction = (data) => ({\n  type: organizationSetupConstants.GET_ORGANIZATION_SETUP_SUCCESS,\n  payload: data,\n});\n\nexport const getOrganizationSetupFailAction = (error) => ({\n  type: organizationSetupConstants.GET_ORGANIZATION_SETUP_FAIL,\n  payload: error,\n});\n\nexport const createOrganizationSetupSuccessAction = (data) => ({\n  type: organizationSetupConstants.CREATE_ORGANIZATION_SETUP_SUCCESS,\n  payload: data,\n});\n\nexport const createOrganizationSetupFailAction = (error) => ({\n  type: organizationSetupConstants.CREATE_ORGANIZATION_SETUP_FAIL,\n  payload: error,\n});\n\nexport const organizationSetupEditAction = (data) => ({\n  type: organizationSetupConstants.ORGANIZATION_SETUP_EDIT,\n  payload: data,\n});\nexport const organizationSetupUpdateSuccessAction = (data) => ({\n  type: organizationSetupConstants.UPDATE_ORGANIZATION_SETUP_SUCCESS,\n  payload: data,\n});\n\nexport const organizationSetupUpdateFailAction = (error) => ({\n  type: organizationSetupConstants.UPDATE_ORGANIZATION_SETUP_FAIL,\n  payload: error,\n});\n\nexport const organizationSetupClearAllDataAction = (error) => ({\n  type: organizationSetupConstants.CLEAR_ALL_DATA,\n});\n\nexport const getOrganizationSuccessAction = (data) => ({\n  type: organizationSetupConstants.GET_ORGANIZATION_SUCCESS,\n  payload: data,\n});\n\nexport const getOrganizationFailAction = (error) => ({\n  type: organizationSetupConstants.GET_ORGANIZATION_FAIL,\n  payload: error,\n});\n","import * as API from \"./api\";\nimport * as action from \"./action\";\nimport { errorFunction, successFunction } from \"../../Component/Alert\";\n\n//get  Bank\nexport const getOrganizationSetup = () => async (dispatch) => {\n  try {\n    dispatch(action.loadingAction());\n    const { data } = await API.getOrganizationSetup();\n\n    dispatch(action.getOrganizationSetupSuccessAction(data));\n  } catch (error) {\n    dispatch(action.getOrganizationSetupFailAction(error));\n    errorFunction(error);\n  }\n};\n//get  Bank\nexport const getOrganization = () => async (dispatch) => {\n  try {\n    dispatch(action.loadingOrganization());\n    const { data } = await API.getOrganization();\n    \n    dispatch(action.getOrganizationSuccessAction(data));\n  } catch (error) {\n    dispatch(action.getOrganizationFailAction(error));\n    errorFunction(error);\n  }\n};\n\nexport const createOrganizationSetup = (value) => async (dispatch) => {\n  const {\n    canMinorApply,\n    newCardValidityYear,\n    otherLettersRequired,\n    recommendationRequired,\n    renewCardValidityYear,\n  } = value;\n  try {\n    const body = new FormData();\n    body.append(\"canMinorApply\", canMinorApply);\n    body.append(\"newCardValidityYear\", newCardValidityYear);\n    body.append(\"otherLettersRequired\", otherLettersRequired);\n    body.append(\"recommendationRequired\", recommendationRequired);\n    body.append(\"renewCardValidityYear\", renewCardValidityYear);\n\n    // if (stamp) {\n    //   body.append(\"stamp\", stamp);\n    // }\n    // if (logo) {\n    //   body.append(\"logo\", logo);\n    // }\n    // if (signature) {\n    //   body.append(\"signature\", signature);\n    // }\n\n    dispatch(action.loadingAction());\n    await API.createOrganizationSetup(body);\n\n    successFunction(\"Organization Setup created successfully \");\n    dispatch(getOrganizationSetup(10));\n    return true;\n  } catch (error) {\n    dispatch(action.createOrganizationSetupFailAction(error));\n    errorFunction(\"Failed to create Organization Setup.\");\n  }\n};\n\n//update\nexport const updateOrganizationSetup = (createData) => async (dispatch) => {\n  const { id, values } = createData;\n  //   canMinorApply\n  // :\n  // true\n  // newCardValidityYear\n  // :\n  // \"3\"\n  // otherLettersRequired\n  // :\n  // true\n  // recommendationRequired\n  // :\n  // true\n  // renewCardValidityYear\n  // :\n  // \"3\n  const {\n    canMinorApply,\n    newCardValidityYear,\n    otherLettersRequired,\n    recommendationRequired,\n    renewCardValidityYear,\n  } = values;\n  try {\n    dispatch(action.loadingUpdatedAction());\n\n    const body = new FormData();\n    body.append(\"canMinorApply\", canMinorApply);\n    body.append(\"newCardValidityYear\", newCardValidityYear);\n    body.append(\"otherLettersRequired\", otherLettersRequired);\n    body.append(\"recommendationRequired\", recommendationRequired);\n    body.append(\"renewCardValidityYear\", renewCardValidityYear);\n    // if (stamp) {\n    //   body.append(\"stamp\", stamp);\n    // }\n    // if (logo) {\n    //   body.append(\"logo\", logo);\n    // }\n    // if (signature) {\n    //   body.append(\"signature\", signature);\n    // }\n\n    dispatch(action.loadingAction());\n\n    const { data } = await API.updateOrganizationSetup(id, body);\n    dispatch(getOrganizationSetup(10));\n    successFunction(\"Organization Setup Updated Successfully \");\n    return true;\n  } catch (error) {\n    dispatch(action.organizationSetupUpdateFailAction(error));\n    errorFunction(\"Failed to Update Organization Setup\");\n  }\n};\n//handle Search\nexport const handleSearch = (search, postsPerPage) => async (dispatch) => {\n  try {\n    dispatch(action.loadingAction());\n    const { data } = await API.handleSearch(search, postsPerPage);\n    dispatch(action.getOrganizationSetupSuccessAction(data));\n  } catch (error) {\n    dispatch(action.getOrganizationSetupFailAction(error));\n    errorFunction(error);\n  }\n};\nexport const organizationSetupClearAllData = () => async (dispatch) => {\n  try {\n    dispatch(action.organizationSetupClearAllDataAction());\n    return true;\n  } catch (error) {}\n};\n"],"names":["search","onClick","addPermission","className","content","size","currentPage","postsPerPage","setCurrentPage","count","setShowModal","maxPageNumberLimit","setMaxPageNumberLimit","minPageNumberLimit","setMinPageNumberLimit","permissions","useSelector","state","auth","isAdmin","isSuperuser","cards","card","next","previous","dispatch","useDispatch","useState","pageNumberLimit","handleView","id","editCardRequest","viewPermission","includes","length","style","width","map","detail","i","fullName","email","citizenshipNumber","mobileNumber","submissionNumber","dobBs","office","wordBreak","name","Tooltip","PaginationBlock","paginate","number","getParticularPage","handleClick","type","getPrevious","prevState","getNext","NoData","clearEditCardSuccessAction","getOrganizationSetup","loading","loadingUpdate","loadingCreate","loadingReject","edit","editDetails","showModal","verifyCard","setVerifyCard","showSignatureModal","setShowSignatureModal","signatures","setSignatures","setSignaturesText","setPostsPerPage","useEffect","getCardRequest","handleSearch","defaultLimit","PaginationLimit","ListingSkeleton","Modal","header","types","clearAction","cardClearData","CreateCard","masterData","createOrganizationSetup","body","axiosInstance","updateOrganizationSetup","loadingAction","organizationSetupConstants","getOrganizationSetupSuccessAction","data","payload","getOrganizationSetupFailAction","error","getOrganizationSuccessAction","action","errorFunction","getOrganization","value","canMinorApply","newCardValidityYear","otherLettersRequired","recommendationRequired","renewCardValidityYear","FormData","append","API","successFunction","createData","values","organizationSetupClearAllData"],"sourceRoot":""}