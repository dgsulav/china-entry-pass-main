{"version":3,"file":"static/js/8035.6ce6ac3a.chunk.js","mappings":"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","sources":["Component/Alert/index.js","Component/NoData/NoData.js","Component/Pagination/DisplayEntries.js","Component/Pagination/index.js","Component/PaginationBlock/index.js","Component/Pagination/PaginationLimit.js","Component/Skeleton/ListingSkeleton.js","Redux/ReprintPrintedCard/api.js","Redux/ReprintPrintedCard/actions.js","Redux/ReprintPrintedCard/thunk.js","Pages/ReprintPrintedCard/ReprintPrintModal.js","Pages/ReprintPrintedCard/ReprintPrintedCard.js","Pages/ReprintPrintedCard/index.js","Redux/PrintedCard/api.js","Redux/PrintedCard/actions.js","Redux/PrintedCard/thunk.js","utils/axios.js","utils/defaultLimit.js"],"sourcesContent":["import { toast } from \"react-toastify\";\ntoast.configure();\n//toast for error\nexport const errorFunction = (error) => {\n  const errorMessage = typeof error === \"string\" ? error : \"error\";\n  toast.error(errorMessage, {\n    position: \"top-right\",\n    autoClose: 2500,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  });\n};\n\n//toast for success\nexport const successFunction = (data) => {\n  const successMessage = typeof data === \"string\" ? data : \"success\";\n  toast.success(successMessage, {\n    position: \"top-right\",\n    autoClose: 2500,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  });\n};\n//toast for info\nexport const infoFunction = (data) => {\n  const infoMessage = typeof data === \"string\" ? data : \"success\";\n  toast.info(infoMessage, {\n    position: \"top-right\",\n    autoClose: 2500,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  });\n};\n","import React from \"react\";\n\nconst index = () => {\n  return (\n    <div className=\"card w-50 p-5 text-center justify-content-center no-data\">\n      <h4 className=\"fw-normal mb-3\">No data to Display</h4>\n    </div>\n  );\n};\n\nexport default index;\n","import React from \"react\";\n\nconst DisplayEntries = ({ offset, limit, count }) => {\n  return(\n    <React.Fragment>\n      <p>\n        Showing {offset} to{\" \"}\n        {limit > count ? count : limit === 0 ? count : limit} of {count} entries\n      </p>  \n    </React.Fragment> \n  );\n};\n\nexport default React.memo(DisplayEntries);","import React from \"react\";\nconst Pagination = ({\n  postsPerPage,\n  totalPosts,\n  paginate,\n  handleClick,\n  currentPage,\n  maxPageNumberLimit,\n  minPageNumberLimit,\n}) => {\n  const pageNumbers = [];\n  if (postsPerPage > 0) {\n    for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\n      pageNumbers.push(i);\n    }\n  }\n  let pageIncrementBtn = null;\n  if (pageNumbers.length > maxPageNumberLimit) {\n    pageIncrementBtn = (\n      <button className=\"page-link\" onClick={() => handleClick(\"next\")}>\n        &hellip;\n      </button>\n    );\n  }\n\n  let pageDecrementBtn = null;\n  if (minPageNumberLimit >= 1) {\n    pageDecrementBtn = (\n      <button className=\"page-link\" onClick={() => handleClick(\"previous\")}>\n        &hellip;\n      </button>\n    );\n  }\n  return (\n    <>\n      <ul className=\"pagination pagination-sm justify-content-end\">\n        <li className=\"page-item \">\n          <button\n            className=\"page-link\"\n            onClick={() => handleClick(\"previous\")}\n            disabled={currentPage === pageNumbers[0] ? true : false}\n          >\n            &laquo;\n          </button>\n        </li>\n        {/* {pageDecrementBtn} */}\n        {pageNumbers.map((number, i) => {\n          if (number < maxPageNumberLimit + 1 && number > minPageNumberLimit) {\n            return (\n              <li className=\"page-item\" key={number}>\n                <button\n                  onClick={() => paginate(number)}\n                  className={`page-link ${\n                    i + 1 === currentPage ? \"active\" : null\n                  }`}\n                >\n                  {number}\n                </button>\n              </li>\n            );\n          } else {\n            return null;\n          }\n        })}\n        {/* {pageIncrementBtn} */}\n        <li className=\"page-item\">\n          <button\n            className=\"page-link\"\n            onClick={() => handleClick(\"next\")}\n            disabled={\n              currentPage === pageNumbers[pageNumbers.length - 1] ? true : false\n            }\n          >\n            &raquo;\n          </button>\n        </li>\n      </ul>\n    </>\n  );\n};\n\nexport default React.memo(Pagination);\n","import React from \"react\";\nimport DisplayEntries from \"../Pagination/DisplayEntries\";\nimport Pagination from \"../Pagination\";\nconst index = ({\n  currentPage,\n  postsPerPage,\n  count,\n  paginate,\n  handleClick,\n  setCurrentPage,\n  minPageNumberLimit,\n  maxPageNumberLimit,\n}) => {\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-6\">\n          <DisplayEntries\n            offset={1 + (currentPage - 1) * postsPerPage}\n            limit={postsPerPage * currentPage}\n            count={count}\n          />\n        </div>\n        {postsPerPage < count && (\n          <div className=\"col-6 text-right\">\n            <Pagination\n              postsPerPage={postsPerPage}\n              totalPosts={count}\n              paginate={paginate}\n              handleClick={handleClick}\n              currentPage={currentPage}\n              setCurrentPage={setCurrentPage}\n              minPageNumberLimit={minPageNumberLimit}\n              maxPageNumberLimit={maxPageNumberLimit}\n            />\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default index;\n","import React from \"react\";\n\nconst PaginationLimit = ({ postsPerPage, setPostsPerPage }) => {\n  const handleChange = (e) => {\n    const data = Number(e.target.value);\n    setPostsPerPage(data);\n  };\n  return (\n    <>\n      <p className=\"fw-normal p-0 m-0\">\n        Show\n        <span className=\"ml-1 mr-1\">\n          {\" \"}\n          <select value={postsPerPage} onChange={handleChange}>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n            <option value=\"40\">40</option>\n            <option value=\"99999999\">All</option>\n          </select>\n        </span>{\" \"}\n        entries\n      </p>\n    </>\n  );\n};\n\nexport default React.memo(PaginationLimit);","import React from \"react\";\nimport Skeleton from \"react-loading-skeleton\";\nconst ListingSkeleton = () => {\n  return (\n    <div className=\" w-100 \">\n      <div className=\"row \">\n        <div className=\"col-6 d-flex \">\n          <Skeleton width={200} height={25} />\n        </div>\n        <div className=\"col-6 d-flex justify-content-end\">\n          <Skeleton width={80} height={30} />\n        </div>\n      </div>\n\n      <div className=\"mt-2\">\n        <Skeleton height={40} />\n        <Skeleton count={10} height={25} />\n      </div>\n      <div className=\"row d-flex mt-2\">\n        <div className=\"col-6\">\n          <Skeleton width={220} height={20} />\n        </div>\n        <div className=\"col-6 d-flex justify-content-end\">\n          <Skeleton width={200} height={30} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ListingSkeleton;\n","import axiosInstance from \"../../utils/axios\";\n\n//obtaining the paginated data\nexport const getReprintPrintedCard = (postsPerPage) =>\n  axiosInstance.get(\n    `api/v1/application/entry-pass-list?offset=0&limit=${postsPerPage}&ordering=-id&status=printed&application_type=reprint`\n  );\n\n//obtaining all data\nexport const getAllReprintPrintedCard = () =>\n  axiosInstance.get(\n    `api/v1/application/entry-pass-list?ordering=-id&status=printed&application_type=reprint`\n  );\n\n//obtaining the previous page data from paginated data\nexport const getPrevious = (previous) => axiosInstance.get(previous);\n\n//obtaining the next page data from paginated data\nexport const getNext = (next) => axiosInstance.get(next);\n\n//obtaining the particular page data from paginated data\nexport const getParticularPage = (number, postsPerPage) =>\n  axiosInstance.get(\n    `api/v1/application/entry-pass-list?offset=${\n      (number - 1) * postsPerPage\n    }&limit=${postsPerPage}&ordering=-id&status=printed&applicationType=reprint&application_type=reprint`\n  );\n\n//searching function\nexport const handleSearch = (search, postsPerPage) =>\n  axiosInstance.get(\n    `api/v1/application/entry-pass-list?offset=0&limit=${postsPerPage}&search=${search}&status=printed&applicationType=reprint&application_type=reprint`\n  );\n","import { reprintPrintedCardConstants } from \"./constants\";\n// actions\nexport const loadingAction = () => ({\n  type: reprintPrintedCardConstants.LOADING_REPRINT_PRINTED_CARD,\n});\nexport const loadingUpdatedAction = () => ({\n  type: reprintPrintedCardConstants.LOADING_UPDATED,\n});\nexport const getReprintPrintedCardSuccessAction = (data) => ({\n  type: reprintPrintedCardConstants.GET_REPRINT_PRINTED_CARD_SUCCESS,\n  payload: data,\n});\nexport const getReprintPrintedCardFailAction = (error) => ({\n  type: reprintPrintedCardConstants.GET_REPRINT_PRINTED_CARD_FAIL,\n  payload: error,\n});\n","import * as API from \"./api\";\nimport * as actions from \"./actions\";\nimport { errorFunction } from \"../../Component/Alert\";\n//get  Bank\nexport const getReprintPrintedCard = (postsPerPage) => async (dispatch) => {\n  try {\n    dispatch(actions.loadingAction());\n    const { data } = await API.getReprintPrintedCard(postsPerPage);\n    dispatch(actions.getReprintPrintedCardSuccessAction(data));\n  } catch (error) {\n    dispatch(actions.getReprintPrintedCardFailAction(error));\n    errorFunction(error);\n  }\n};\n// get all bank\nexport const getAllReprintPrintedCard = () => async (dispatch) => {\n  try {\n    dispatch(actions.loadingAction());\n    const { data } = await API.getAllReprintPrintedCard();\n    dispatch(actions.getReprintPrintedCardSuccessAction(data));\n  } catch (error) {\n    dispatch(actions.getReprintPrintedCardFailAction(error));\n    errorFunction(error);\n  }\n};\n//get previous  page\nexport const getPrevious = (previous) => async (dispatch) => {\n  try {\n    dispatch(actions.loadingAction());\n    const { data } = await API.getPrevious(previous);\n    dispatch(actions.getReprintPrintedCardSuccessAction(data));\n  } catch (error) {\n    dispatch(actions.getReprintPrintedCardFailAction(error));\n    errorFunction(error);\n  }\n};\n//get next  page\nexport const getNext = (next) => async (dispatch) => {\n  try {\n    dispatch(actions.loadingAction());\n    const { data } = await API.getNext(next);\n    dispatch(actions.getReprintPrintedCardSuccessAction(data));\n  } catch (error) {\n    dispatch(actions.getReprintPrintedCardFailAction(error));\n    errorFunction(error);\n  }\n};\n//get particular page\nexport const getParticularPage =\n  ({ number, postsPerPage }) =>\n  async (dispatch) => {\n    try {\n      dispatch(actions.loadingAction());\n      const { data } = await API.getParticularPage(number, postsPerPage);\n      dispatch(actions.getReprintPrintedCardSuccessAction(data));\n    } catch (error) {\n      dispatch(actions.getReprintPrintedCardFailAction(error));\n      errorFunction(error);\n    }\n  };\n\n//handle Search\nexport const handleSearch = (search, postsPerPage) => async (dispatch) => {\n  try {\n    dispatch(actions.loadingAction());\n    const { data } = await API.handleSearch(search, postsPerPage);\n    dispatch(actions.getReprintPrintedCardSuccessAction(data));\n  } catch (error) {\n    dispatch(actions.getReprintPrintedCardFailAction(error));\n    errorFunction(error);\n  }\n};\n","import jsPDF from \"jspdf\";\nimport Front from \"../../assets/front.png\";\nimport Back from \"../../assets/back.png\";\nimport QRCode from \"qrcode\";\nimport { useRef } from \"react\";\nimport { FaTimes } from \"react-icons/fa\";\n\nconst ReprintPrintModal = ({ show, setShow, info, setInfo }) => {\n  const qrCanvasRef = useRef(null);\n\n  const {\n    cardId,\n    userPhoto,\n    cardNumber,\n    submissionNumber,\n    fullName,\n    fatherName,\n    dob,\n    gender,\n    district,\n    palika,\n    signaturePhoto,\n    approvedBy,\n    cardIssueDate,\n  } = info;\n\n  const userProfile = userPhoto;\n\n  const cardNo = `Card No:- ${cardNumber}`;\n  const sex = `Sex:- ${\n    gender === \"m\" ? \"Male\" : gender === \"f\" ? \"Female\" : \"Other\"\n  }`;\n  const name = `Name:- ${fullName}`;\n  const fName = `Father's Name:- ${fatherName}`;\n  const dateOfBirth = `Date of Birth:- ${dob}`;\n  const pAddress = `Address:-`;\n  const districtName = `${district?.name}`;\n  // , District`;\n  const municipality = `Municipality:- ${palika?.name}`;\n  // const ward = `Ward No:- ${wardNumber}`;\n\n  // content for back page of card\n  const officerName = `Officer's Name: ${\n    approvedBy ? (approvedBy?.name ? approvedBy?.name : \"\") : \"\"\n  }`;\n  const designation = `Designation: ${\n    approvedBy ? (approvedBy?.designation ? approvedBy?.designation : \"\") : \"\"\n  }`;\n  // const userSignature = ;\n  const issuedDate = `Issued Date: ${\n    cardIssueDate ? cardIssueDate.slice(0, 10) : \"\"\n  }`;\n\n  const signatureText = \"Signature: \";\n\n  let xPos = 15;\n  let yPos = 60;\n  const doc = new jsPDF({\n    orientation: \"landscape\",\n    unit: \"mm\",\n    format: [430, 270],\n  });\n  // doc.addImage(Front, \"PNG\", 0, 0, 430, 270);\n  // doc.setFont(\"Cambria_Regular\", \"bold\");\n  doc.setFontSize(40);\n  yPos = yPos + 45;\n  doc.text(cardNo, xPos, yPos);\n  yPos = yPos + 18;\n\n  doc.text(name, xPos, yPos);\n  yPos = yPos + 18;\n  doc.text(fName, xPos, yPos);\n  yPos = yPos + 18;\n  doc.text(dateOfBirth, xPos, yPos);\n  doc.text(sex, xPos + 200, yPos);\n  yPos = yPos + 18;\n  doc.text(pAddress, xPos, yPos);\n  const textWidth = doc.getTextWidth(pAddress);\n  doc.text(districtName, xPos + textWidth + 4, yPos);\n  doc.setLineWidth(0.01);\n  doc.setLineDashPattern([1, 1]);\n  doc.setDrawColor(0, 0, 0);\n  // doc.line(xPos + textWidth + 2, yPos + 2, yPos, yPos + 2);\n\n  yPos = yPos + 18;\n  doc.text(municipality, xPos, yPos);\n  yPos = yPos + 18;\n  // doc.text(ward, xPos, yPos);\n  yPos = yPos + 18;\n  // doc.text(expiryDate, xPos, yPos);\n\n  doc.addImage(userProfile, 323, 85, 90, 96.5);\n  doc.setLineDash([]);\n  doc.addPage();\n\n  // Add content to the second page...\n\n  let pageTwoXPos = 20;\n  let pageTwoYPos = 25;\n  doc.text(\"Card Holder's\", pageTwoXPos, pageTwoYPos);\n  doc.setLineWidth(0.05);\n  doc.setDrawColor(0, 0, 0);\n  doc.line(pageTwoXPos, 29, 105, 29);\n  doc.text(\"Card Issuing Authority\", 215, pageTwoYPos);\n  // doc.setFont(\"Cambria_Regular\", \"bold\");\n  doc.setLineWidth(0.07);\n  doc.setDrawColor(0, 0, 0);\n  doc.line(215, 29, 355, 29);\n  pageTwoYPos = pageTwoYPos + 20;\n\n  const signatureTextWidth = doc.getTextWidth(signatureText);\n\n  // doc.addImage(Back, \"PNG\", 0, 0, 430, 270);\n  const qrData = JSON.stringify({\n    id: cardId,\n    submissionNumber: submissionNumber,\n    cardNumber: cardNumber,\n  });\n  const data = document.createElement(\"canvas\");\n  const ctx = data.getContext(\"2d\");\n  qrCanvasRef.current = {\n    data,\n    ctx,\n  };\n  QRCode.toCanvas(data, qrData, function (error) {\n    if (error) {\n      console.error(error);\n    } else {\n      console.log(\"QR Code generated successfully\");\n    }\n  });\n\n  // Add QR code image to PDF\n  doc.addImage(data, \"PNG\", 14, 107, 70, 70);\n  doc.addImage(signaturePhoto, \"PNG\", signatureTextWidth + 6, 40, 50, 40);\n  doc.text(signatureText, pageTwoXPos, pageTwoYPos);\n  doc.text(officerName, 200, pageTwoYPos);\n  pageTwoYPos = pageTwoYPos + 20;\n  doc.text(designation, 200, pageTwoYPos);\n  pageTwoYPos = pageTwoYPos + 20;\n  doc.addImage(approvedBy?.signaturePhoto, \"PNG\", 290, 70, 35, 25);\n  doc.text(\"Signature:\", 200, pageTwoYPos);\n\n  pageTwoYPos = pageTwoYPos + 20;\n  doc.text(issuedDate, 200, pageTwoYPos);\n  pageTwoYPos = pageTwoYPos + 20;\n\n  doc.setFontSize(34);\n  pageTwoYPos = pageTwoYPos + 40;\n\n  let blob = doc.output(\"blob\");\n  const pdfUrl = URL.createObjectURL(blob);\n  // Append #toolbar=0 to hide the entire toolbar\n  const urlWithParams = `${pdfUrl}#toolbar=0`;\n  const modalClass = show ? \"modal display-block\" : \"modal display-none\";\n  const handleClose = () => {\n    setShow(false);\n    setInfo(\"\");\n  };\n  return (\n    <div className={modalClass} tabIndex=\"-1\">\n      <div className=\"modal-dialog modal-lg\">\n        <div className=\"modal-content content\">\n          <div className=\"modal-header\">\n            <h5 className=\"modal-title\" id=\"exampleModalLabel\">\n              Print Preview\n            </h5>\n            <button\n              type=\"button\"\n              className=\"btn-close\"\n              data-dismiss=\"modal\"\n              aria-label=\"Close\"\n              onClick={handleClose}\n            >\n              <FaTimes />\n            </button>\n          </div>\n          <div className=\"modal-body text-center\">\n            {!cardNumber && (\n              <div>\n                <p>Card Number is not generated.</p>\n                <p>Please request for card number first.</p>\n              </div>\n            )}\n            <iframe\n              type=\"application/pdf\"\n              width=\"500px\"\n              src={urlWithParams}\n              height=\"630px\"\n              title=\"Print Preview\"\n            ></iframe>\n          </div>\n          <canvas ref={qrCanvasRef} style={{ display: \"none\" }} />\n        </div>\n      </div>{\" \"}\n    </div>\n  );\n};\n\nexport default ReprintPrintModal;\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  getParticularPage,\n  getPrevious,\n  getNext,\n} from \"../../Redux/PrintedCard/thunk\";\nimport PaginationBlock from \"../../Component/PaginationBlock\";\nimport NoData from \"../../Component/NoData/NoData\";\nimport ReprintPrintModal from \"./ReprintPrintModal\";\n\nconst ReprintPrintedCard = ({\n  currentPage,\n  postsPerPage,\n  setCurrentPage,\n  count,\n  maxPageNumberLimit,\n  setMaxPageNumberLimit,\n  minPageNumberLimit,\n  setMinPageNumberLimit,\n}) => {\n  const [show, setShow] = useState(false);\n  const [info, setInfo] = useState(null);\n  const permissions = useSelector((state) => state.auth.permissions);\n  const isAdmin = useSelector((state) => state.auth.isAdmin);\n  const isSuperuser = useSelector((state) => state.auth.isSuperuser);\n\n  // props\n\n  const reprintPrintedCards = useSelector(\n    (state) => state.reprintPrintedCard.reprintPrintedCards\n  );\n  const previous = useSelector((state) => state.reprintPrintedCard.previous);\n  const next = useSelector((state) => state.reprintPrintedCard.next);\n  const dispatch = useDispatch();\n\n  // for pagination\n  const [pageNumberLimit] = useState(5);\n\n  //change page\n  const paginate = (number) => {\n    dispatch(getParticularPage({ number, postsPerPage }));\n    setCurrentPage(number);\n  };\n\n  //handle Click\n  const handleClick = (type) => {\n    if (type === \"previous\") {\n      dispatch(getPrevious(previous));\n      setCurrentPage((prevState) => prevState - 1);\n      if ((currentPage - 1) % pageNumberLimit === 0) {\n        setMaxPageNumberLimit(maxPageNumberLimit - pageNumberLimit);\n        setMinPageNumberLimit(minPageNumberLimit - pageNumberLimit);\n      }\n    } else if (type === \"next\") {\n      dispatch(getNext(next));\n      setCurrentPage((prevState) => prevState + 1);\n      if (currentPage + 1 > maxPageNumberLimit) {\n        setMaxPageNumberLimit(maxPageNumberLimit + pageNumberLimit);\n        setMinPageNumberLimit(minPageNumberLimit + pageNumberLimit);\n      }\n    }\n  };\n\n  //pagination end\n\n  // const handleCard = (detail) => {\n  //   setInfo(detail);\n  //   setShow(true);\n  // };\n\n  // const viewPermission =\n  //   permissions.includes(\"can_read_entrypass\") || isAdmin || isSuperuser;\n\n  return (\n    <>\n      {reprintPrintedCards?.length > 0 ? (\n        <div className=\"mt-2\">\n          <div className=\"table-scrollable\">\n            <table className=\"table table-hover table-bordered text-center\">\n              <thead>\n                <tr>\n                  <th scope=\"col\" style={{ width: \"2%\" }}>\n                    S.N\n                  </th>\n\n                  <th scope=\"col\" className=\"text-left\">\n                    Name\n                  </th>\n                  <th scope=\"col\" className=\"text-left\">\n                    Email\n                  </th>\n                  <th scope=\"col\" className=\"text-left\">\n                    Card Number\n                  </th>\n                  <th scope=\"col\" className=\"text-left\">\n                    Citizenship\n                  </th>\n                  <th scope=\"col\" className=\"text-left\">\n                    Mobile number\n                  </th>\n                  <th scope=\"col\" className=\"text-left\">\n                    DOB B.S\n                  </th>\n                  <th scope=\"col\" className=\"text-left\">\n                    Office\n                  </th>\n                  <th scope=\"col\" className=\"text-left\">\n                    Reference\n                  </th>\n                  {/* <th scope=\"col\">Action</th> */}\n                </tr>\n              </thead>\n              <tbody>\n                {reprintPrintedCards?.length > 0 &&\n                  reprintPrintedCards.map((detail, i) => {\n                    const {\n                      id,\n                      fullName,\n                      email,\n                      citizenshipNumber,\n                      mobileNumber,\n                      submissionNumber,\n                      dobBs,\n                      office,\n                      cardNumber,\n                    } = detail;\n\n                    return (\n                      <tr key={id}>\n                        <td className=\"fw-bold\" style={{ width: \"2%\" }}>\n                          {postsPerPage * (currentPage - 1) + (i + 1)}{\" \"}\n                        </td>\n\n                        <td className=\"text-left\">{fullName}</td>\n                        <td\n                          className=\"text-left\"\n                          style={{ wordBreak: \"break-all\" }}\n                        >\n                          {email !== \"\" ? email : \"N/A\"}\n                        </td>\n                        <td className=\"text-left\">{cardNumber}</td>\n                        <td className=\"text-left\">{citizenshipNumber}</td>\n                        <td className=\"text-left\">{mobileNumber}</td>\n                        {/* <td className=\"text-left\">\n                          {status === \"pending\"\n                            ? \"PENDING\"\n                            : status === \"verified\"\n                            ? \"VERIFIED\"\n                            : status === \"approved\"\n                            ? \"APPROVED\"\n                            : status === \"rejected\"\n                            ? \"REJECTED\"\n                            : \"PRINTED\"}\n                        </td> */}\n                        <td className=\"text-left\">{dobBs}</td>\n                        <td className=\"text-left\">{office?.name}</td>\n                        <td className=\"text-left\">{submissionNumber}</td>\n\n                        {/* <td>\n                          {viewPermission && (\n                            <Tooltip content=\"Preview Card\">\n                              <button\n                                onClick={() => handleCard(detail)}\n                                className=\"btn btn-sm  btn-success mx-2\"\n                              >\n                                <FaPrint />\n                              </button>\n                            </Tooltip>\n                          )}\n                        </td> */}\n                      </tr>\n                    );\n                  })}\n              </tbody>\n            </table>\n          </div>\n          {count > 0 && (\n            <PaginationBlock\n              currentPage={currentPage}\n              postsPerPage={postsPerPage}\n              count={count}\n              paginate={paginate}\n              handleClick={handleClick}\n              setCurrentPage={setCurrentPage}\n              minPageNumberLimit={minPageNumberLimit}\n              maxPageNumberLimit={maxPageNumberLimit}\n            />\n          )}\n        </div>\n      ) : (\n        <NoData />\n      )}\n      {show && (\n        <ReprintPrintModal\n          show={show}\n          setShow={setShow}\n          info={info}\n          setInfo={setInfo}\n        />\n      )}\n    </>\n  );\n};\n\nexport default ReprintPrintedCard;\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport PaginationLimit from \"../../Component/Pagination/PaginationLimit\";\nimport ListingSkeleton from \"../../Component/Skeleton/ListingSkeleton\";\nimport {\n  getReprintPrintedCard,\n  handleSearch,\n} from \"../../Redux/ReprintPrintedCard/thunk\";\nimport { defaultLimit } from \"../../utils/defaultLimit\";\nimport ReprintPrintedCard from \"./ReprintPrintedCard\";\n\nconst ReprintPrintedCardListing = () => {\n  const reprintPrintedCards = useSelector(\n    (state) => state.reprintPrintedCard.reprintPrintedCards\n  );\n  const loading = useSelector((state) => state.reprintPrintedCard.loading);\n  const loadingUpdated = useSelector(\n    (state) => state.reprintPrintedCard.loadingUpdated\n  );\n  const count = useSelector((state) => state.reprintPrintedCard.count);\n  const search = useSelector((state) => state.search.search);\n\n  const dispatch = useDispatch();\n\n  // for pagination\n  const [currentPage, setCurrentPage] = useState(1);\n  const [maxPageNumberLimit, setMaxPageNumberLimit] = useState(5);\n  const [minPageNumberLimit, setMinPageNumberLimit] = useState(0);\n  const [postsPerPage, setPostsPerPage] = useState(10);\n\n  //pagination end\n  //loading all the food\n  useEffect(() => {\n    if (postsPerPage === 0) {\n      if (search === \"\") {\n        dispatch(getReprintPrintedCard(count));\n      } else {\n        dispatch(handleSearch(search, count));\n      }\n    } else {\n      if (search === \"\") {\n        if (postsPerPage === defaultLimit) {\n          dispatch(getReprintPrintedCard(postsPerPage));\n        } else {\n          setCurrentPage(1);\n          dispatch(getReprintPrintedCard(postsPerPage));\n        }\n      } else {\n        setCurrentPage(1);\n        setMaxPageNumberLimit(5);\n        setMinPageNumberLimit(0);\n        dispatch(handleSearch(search, postsPerPage));\n      }\n    }\n  }, [dispatch, postsPerPage, search]);\n\n  return (\n    <>\n      <div className=\"user-card\">\n        <div className=\"header-content\">\n          <h4 className=\"mb-sm-0 fw-normal\">Reprint Printed Cards Listing</h4>\n        </div>\n        <div\n          className={`${\n            reprintPrintedCards?.length > 0 ? \"office-card-body\" : \"card-body\"\n          }`}\n        >\n          <div className=\"row m-0 p-0\">\n            {reprintPrintedCards?.length > 0 && (\n              <>\n                <div className=\"col-6\">\n                  <PaginationLimit\n                    postsPerPage={postsPerPage}\n                    setPostsPerPage={setPostsPerPage}\n                  />\n                </div>\n              </>\n            )}\n          </div>\n          {loading && <ListingSkeleton />}\n          {loadingUpdated && <ListingSkeleton />}\n          {!loading && !loadingUpdated && (\n            <ReprintPrintedCard\n              currentPage={currentPage}\n              setCurrentPage={setCurrentPage}\n              postsPerPage={postsPerPage}\n              setPostsPerPage={setPostsPerPage}\n              count={count}\n              maxPageNumberLimit={maxPageNumberLimit}\n              setMaxPageNumberLimit={setMaxPageNumberLimit}\n              minPageNumberLimit={minPageNumberLimit}\n              setMinPageNumberLimit={setMinPageNumberLimit}\n              search={search}\n            />\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ReprintPrintedCardListing;\n","import axiosInstance from \"../../utils/axios\";\n\n//obtaining the paginated data\nexport const getPrintedCard = (postsPerPage) =>\n  axiosInstance.get(\n    `api/v1/application/entry-pass-list?offset=0&limit=${postsPerPage}&ordering=-id&status=printed&application_type=new`\n  );\n\n//obtaining all data\nexport const getAllPrintedCard = () =>\n  axiosInstance.get(\n    `api/v1/application/entry-pass-list?ordering=-id&status=printed&application_type=new`\n  );\n\n//obtaining the previous page data from paginated data\nexport const getPrevious = (previous) => axiosInstance.get(previous);\n\n//obtaining the next page data from paginated data\nexport const getNext = (next) => axiosInstance.get(next);\n\n//obtaining the particular page data from paginated data\nexport const getParticularPage = (number, postsPerPage) =>\n  axiosInstance.get(\n    `api/v1/application/entry-pass-list?offset=${\n      (number - 1) * postsPerPage\n    }&limit=${postsPerPage}&ordering=-id&status=printed&application_type=new`\n  );\n\n//searching function\nexport const handleSearch = (search, postsPerPage) =>\n  axiosInstance.get(\n    `api/v1/application/entry-pass-list?offset=0&limit=${postsPerPage}&search=${search}&status=printed&application_type=new`\n  );\n","import { printedCardConstants } from \"./constants\";\n// actions\nexport const loadingAction = () => ({\n  type: printedCardConstants.LOADING_PRINTED_CARD,\n});\nexport const loadingUpdatedAction = () => ({\n  type: printedCardConstants.LOADING_UPDATED,\n});\nexport const getPrintedCardSuccessAction = (data) => ({\n  type: printedCardConstants.GET_PRINTED_CARD_SUCCESS,\n  payload: data,\n});\nexport const getPrintedCardFailAction = (error) => ({\n  type: printedCardConstants.GET_PRINTED_CARD_FAIL,\n  payload: error,\n});\n","import * as API from \"./api\";\nimport * as actions from \"./actions\";\nimport { errorFunction } from \"../../Component/Alert\";\n//get  Bank\nexport const getPrintedCard = (postsPerPage) => async (dispatch) => {\n  try {\n    dispatch(actions.loadingAction());\n    const { data } = await API.getPrintedCard(postsPerPage);\n    dispatch(actions.getPrintedCardSuccessAction(data));\n  } catch (error) {\n    dispatch(actions.getPrintedCardFailAction(error));\n    errorFunction(error);\n  }\n};\n// get all bank\nexport const getAllPrintedCard = () => async (dispatch) => {\n  try {\n    dispatch(actions.loadingAction());\n    const { data } = await API.getAllPrintedCard();\n    dispatch(actions.getPrintedCardSuccessAction(data));\n  } catch (error) {\n    dispatch(actions.getPrintedCardFailAction(error));\n    errorFunction(error);\n  }\n};\n//get previous  page\nexport const getPrevious = (previous) => async (dispatch) => {\n  try {\n    dispatch(actions.loadingAction());\n    const { data } = await API.getPrevious(previous);\n    dispatch(actions.getPrintedCardSuccessAction(data));\n  } catch (error) {\n    dispatch(actions.getPrintedCardFailAction(error));\n    errorFunction(error);\n  }\n};\n//get next  page\nexport const getNext = (next) => async (dispatch) => {\n  try {\n    dispatch(actions.loadingAction());\n    const { data } = await API.getNext(next);\n    dispatch(actions.getPrintedCardSuccessAction(data));\n  } catch (error) {\n    dispatch(actions.getPrintedCardFailAction(error));\n    errorFunction(error);\n  }\n};\n//get particular page\nexport const getParticularPage =\n  ({ number, postsPerPage }) =>\n  async (dispatch) => {\n    try {\n      dispatch(actions.loadingAction());\n      const { data } = await API.getParticularPage(number, postsPerPage);\n      dispatch(actions.getPrintedCardSuccessAction(data));\n    } catch (error) {\n      dispatch(actions.getPrintedCardFailAction(error));\n      errorFunction(error);\n    }\n  };\n\n//handle Search\nexport const handleSearch = (search, postsPerPage) => async (dispatch) => {\n  try {\n    dispatch(actions.loadingAction());\n    const { data } = await API.handleSearch(search, postsPerPage);\n    dispatch(actions.getPrintedCardSuccessAction(data));\n  } catch (error) {\n    dispatch(actions.getPrintedCardFailAction(error));\n    errorFunction(error);\n  }\n};\n","import axios from \"axios\";\nimport { store } from \"../Redux/store\";\nimport { authConstants } from \"../Redux/Auth/constants\";\nimport { toast } from \"react-toastify\";\n\n//creating axios instance\nexport const publicAxiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_BASE_URL,\n});\nexport const printerAxiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_PRINTER_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\nconst axiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n//interceptor\n//request handling\naxiosInstance.interceptors.request.use(\n  (config) => {\n    // if (!window.navigator.onLine) {\n    //   return Promise.reject(\"No Internet\");\n    // }\n    if (window.navigator.onLine) {\n      config.headers[\"Authorization\"] = localStorage.getItem(\"accessToken\")\n        ? `Bearer ${localStorage.getItem(\"accessToken\")}`\n        : null;\n      config.baseURL = process.env.REACT_APP_BASE_URL;\n      return config;\n    }\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n//response handling\naxiosInstance.interceptors.response.use(\n  (res) => res,\n  async (error) => {\n    //refresh token\n\n    const originalRequest = error.config;\n    //when refresh token is also not valid\n    if (\n      error.response.status === 401 &&\n      originalRequest.url === `auth/token/refresh`\n    ) {\n      store.dispatch({ type: authConstants.AUTH_ERROR });\n      // return Promise.reject(error.response?.data.code);\n      // return toast.error(`Refresh Token Expired. Please Login.`, {\n      //   autoClose: 1200,\n      // });\n    }\n    //accessing new access token from refresh token\n    if (\n      error.response?.data.code === \"token_not_valid\" &&\n      !originalRequest._retry\n    ) {\n      //call for refresh token\n      originalRequest._retry = true;\n      try {\n        const body = JSON.stringify({\n          refresh: localStorage.getItem(\"refreshToken\"),\n        });\n        localStorage.removeItem(\"accessToken\");\n        const response = await axiosInstance.post(`auth/token/refresh`, body);\n        if (response.status === 200) {\n          localStorage.setItem(\"accessToken\", response?.data.access);\n          originalRequest.headers[\n            \"Authorization\"\n          ] = `Bearer ${response?.data.access}`;\n          return axiosInstance(originalRequest);\n        }\n      } catch (error) {\n        store.dispatch({\n          type: authConstants.AUTH_ERROR,\n        });\n\n        // return toast.error(`${error.response.data.error}`);\n        // return Promise.reject(error.response?.data.error);\n      }\n      // return store.dispatch({ type: AUTH_ERROR });\n    }\n    //no Internet\n    if (error === \"No Internet\") {\n      toast.error(`No Internet Connection !!!`);\n      // return Promise.reject(`No Internet`);\n    }\n    //server down\n    if (error.message === \"Network Error\") {\n      toast.error(\"Internal Server Error. Contact IT manager !!!\", {\n        autoClose: 1200,\n      });\n      // return Promise.reject(`Internal Server Error. Contact IT manager !!!`);\n    }\n    if (error.response?.status === 500) {\n      toast.error(\"Internal Server Error. Contact IT manager !!!\", {\n        autoClose: 1200,\n      });\n      // return Promise.reject(`Internal Server Error. Contact IT manager !!!`);\n    }\n    if (error.response?.status === 404) {\n      toast.error(\"Page Not Found !!!!!\", { autoClose: 1200 });\n    }\n    //unauthorized user\n    if (\n      error.response?.status === 401 ||\n      error.message === \"Invalid token specified\"\n    ) {\n      store.dispatch({ type: authConstants.AUTH_ERROR });\n      // toast.error(\"Unauthorized User\", { autoClose: 1200 });\n\n      return Promise.reject(error.response.data.detail);\n    }\n    //error between 400\n    const expectedError =\n      error.response &&\n      error.response.status >= 400 &&\n      error.response.status < 500;\n    if (expectedError) {\n      if (error.response.data.detail) {\n        return Promise.reject(`${error.response.data.detail}`);\n      } else {\n        return Promise.reject(`${error.response.statusText}`);\n      }\n    }\n    return Promise.reject(error);\n  }\n);\nexport default axiosInstance;\n","export const defaultLimit = 10;\n"],"names":["toast","errorFunction","error","errorMessage","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","successFunction","data","successMessage","infoFunction","infoMessage","className","DisplayEntries","offset","limit","count","React","Pagination","postsPerPage","totalPosts","paginate","handleClick","currentPage","maxPageNumberLimit","minPageNumberLimit","pageNumbers","i","Math","ceil","push","length","onClick","disabled","map","number","setCurrentPage","PaginationLimit","setPostsPerPage","value","onChange","e","Number","target","width","height","getReprintPrintedCard","axiosInstance","handleSearch","search","loadingAction","type","reprintPrintedCardConstants","getReprintPrintedCardSuccessAction","payload","getReprintPrintedCardFailAction","dispatch","actions","API","show","setShow","info","setInfo","qrCanvasRef","useRef","cardId","userPhoto","cardNumber","submissionNumber","fullName","fatherName","dob","gender","district","palika","signaturePhoto","approvedBy","cardIssueDate","userProfile","cardNo","sex","name","fName","dateOfBirth","pAddress","districtName","municipality","officerName","designation","issuedDate","slice","signatureText","xPos","yPos","doc","jsPDF","orientation","unit","format","setFontSize","text","textWidth","getTextWidth","setLineWidth","setLineDashPattern","setDrawColor","addImage","setLineDash","addPage","pageTwoYPos","line","signatureTextWidth","qrData","JSON","stringify","id","document","createElement","ctx","getContext","current","QRCode","console","log","blob","output","pdfUrl","URL","createObjectURL","urlWithParams","modalClass","tabIndex","src","title","ref","style","display","setMaxPageNumberLimit","setMinPageNumberLimit","useState","reprintPrintedCards","useSelector","state","auth","permissions","isAdmin","isSuperuser","reprintPrintedCard","previous","next","useDispatch","pageNumberLimit","scope","detail","email","citizenshipNumber","mobileNumber","dobBs","office","wordBreak","PaginationBlock","getParticularPage","getPrevious","prevState","getNext","NoData","loading","loadingUpdated","useEffect","defaultLimit","ListingSkeleton","getPrintedCard","printedCardConstants","getPrintedCardSuccessAction","getPrintedCardFailAction","printerAxiosInstance","axios","baseURL","process","headers","interceptors","request","use","config","window","navigator","onLine","localStorage","getItem","Promise","reject","response","res","originalRequest","status","url","store","authConstants","code","_retry","body","refresh","removeItem","post","setItem","access","message","statusText"],"sourceRoot":""}