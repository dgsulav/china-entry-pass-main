{"version":3,"file":"static/js/4907.f59f9004.chunk.js","mappings":"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","sources":["Component/Alert/index.js","Component/TextError/TextError.js","Pages/ResetPassword/ChangePassword.js","Redux/Auth/api.js","Redux/Auth/action.js","Redux/Auth/thunk.js","utils/axios.js"],"sourcesContent":["import { toast } from \"react-toastify\";\ntoast.configure();\n//toast for error\nexport const errorFunction = (error) => {\n  const errorMessage = typeof error === \"string\" ? error : \"error\";\n  toast.error(errorMessage, {\n    position: \"top-right\",\n    autoClose: 2500,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  });\n};\n\n//toast for success\nexport const successFunction = (data) => {\n  const successMessage = typeof data === \"string\" ? data : \"success\";\n  toast.success(successMessage, {\n    position: \"top-right\",\n    autoClose: 2500,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  });\n};\n//toast for info\nexport const infoFunction = (data) => {\n  const infoMessage = typeof data === \"string\" ? data : \"success\";\n  toast.info(infoMessage, {\n    position: \"top-right\",\n    autoClose: 2500,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  });\n};\n","import React from \"react\";\nimport \"./TextError.css\";\nconst TextError = (props) => {\n  return <div className=\"error\">{props.children}</div>;\n};\n\nexport default TextError;\n","import React, { useState } from \"react\";\nimport { BsFillEyeFill, BsFillEyeSlashFill } from \"react-icons/bs\";\nimport TextError from \"../../Component/TextError/TextError\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { Form, Field, Formik, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport \"../Login/Login.css\";\nimport { useHistory } from \"react-router-dom\";\nimport { changePassword } from \"../../Redux/Auth/thunk\";\n\nconst ChangePassword = () => {\n  const userid = useSelector((state) => state.auth.userid);\n  const dispatch = useDispatch();\n\n  let history = useHistory();\n\n  const [type, setType] = useState(\"password\");\n  const [type1, setType1] = useState(\"password\");\n  const [type2, setType2] = useState(\"password\");\n\n  const initialValues = {\n    password: \"\",\n    confirm_password: \"\",\n    old_password: \"\",\n  };\n  //validation rule for the form field in formik\n  const validationSchema = Yup.object().shape({\n    old_password: Yup.string().required(\"Old Password  is required\"),\n    password: Yup.string()\n      .required(\"Please Enter your password\")\n      .matches(\n        /^(?=.*[a-z])(?=.*\\d)[A-Za-z\\d@$!%*#?&]{6,}$/,\n        \"Must Contain 6 Characters, One alphabet and One Number \"\n      ),\n    confirm_password: Yup.string()\n      .required(\"Password is required\")\n      .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\"),\n  });\n  //submit handler for formik\n  const onSubmit = (values) => {\n    const { password, confirm_password, old_password } = values;\n    const id = userid;\n    dispatch(changePassword(old_password, password, confirm_password, history));\n  };\n  // toggle password\n  const handleClick = () => {\n    if (type === \"password\") {\n      setType(\"text\");\n    } else {\n      setType(\"password\");\n    }\n  };\n  // toggle confirm password\n  const handleClick1 = () => {\n    if (type1 === \"password\") {\n      setType1(\"text\");\n    } else {\n      setType1(\"password\");\n    }\n  };\n  // toggle confirm password\n  const handleClick2 = () => {\n    if (type2 === \"password\") {\n      setType2(\"text\");\n    } else {\n      setType2(\"password\");\n    }\n  };\n  return (\n    <div className=\"\">\n      <div className=\"account-pages my-5\">\n        <div className=\"container\">\n          <div className=\"row justify-content-center \">\n            <div className=\"col-md-8 col-lg-6 col-xl-5\">\n              <div className=\"card overflow-hidden card-reset\">\n                <div className=\"bg-primary bg-soft\">\n                  <div className=\"row\">\n                    <div className=\"col-sm-12\">\n                      <div className=\"text-center m-3\">\n                        <h5>Change password</h5>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"card-body pt-0\">\n                  <div className=\"w-100\">\n                    <Formik\n                      initialValues={initialValues}\n                      validationSchema={validationSchema}\n                      onSubmit={onSubmit}\n                    >\n                      {(formik) => {\n                        return (\n                          <Form autoComplete=\"off\" className=\"form-horizontal \">\n                            <div className=\"mb-3   password-field\">\n                              <label\n                                htmlFor=\"old_password\"\n                                className=\"form-label \"\n                              >\n                                Old Password\n                              </label>\n                              <div style={{ position: \"relative\" }}>\n                                <Field\n                                  type={type}\n                                  className=\"form-control change-textfield \"\n                                  name=\"old_password\"\n                                  placeholder=\"Old Password\"\n                                />\n                                <span onClick={handleClick}>\n                                  {type === \"password\" ? (\n                                    <BsFillEyeSlashFill />\n                                  ) : (\n                                    <BsFillEyeFill />\n                                  )}\n                                </span>\n                              </div>\n                              <ErrorMessage\n                                name=\"old_password\"\n                                component={TextError}\n                              />\n                            </div>\n                            <div className=\"mb-3  password-field\">\n                              <label htmlFor=\"password\" className=\"form-label \">\n                                New Password\n                              </label>\n                              <div style={{ position: \"relative\" }}>\n                                <Field\n                                  type={type2}\n                                  className=\"form-control change-textfield \"\n                                  name=\"password\"\n                                  placeholder=\"New Password\"\n                                />\n                                <span onClick={handleClick2}>\n                                  {type2 === \"password\" ? (\n                                    <BsFillEyeSlashFill />\n                                  ) : (\n                                    <BsFillEyeFill />\n                                  )}\n                                </span>\n                              </div>\n                              <ErrorMessage\n                                name=\"password\"\n                                component={TextError}\n                              />\n                            </div>\n                            <div className=\"mb-3  password-field\">\n                              <label\n                                htmlFor=\"confirm-password\"\n                                className=\"form-label \"\n                              >\n                                Confirm Password\n                              </label>\n                              <div style={{ position: \"relative\" }}>\n                                <Field\n                                  type={type1}\n                                  className=\"form-control change-textfield \"\n                                  name=\"confirm_password\"\n                                  placeholder=\"Confirm Password\"\n                                />\n                                <span onClick={handleClick1}>\n                                  {type1 === \"password\" ? (\n                                    <BsFillEyeSlashFill />\n                                  ) : (\n                                    <BsFillEyeFill />\n                                  )}\n                                </span>\n                              </div>\n                              <ErrorMessage\n                                name=\"confirm_password\"\n                                component={TextError}\n                              />\n                            </div>\n                            <div className=\"mt-3 d-grid text-center\">\n                              <button\n                                className=\"btn btn-primary waves-effect waves-light mt-4 m-3\"\n                                type=\"submit\"\n                              >\n                                Save Changes\n                              </button>\n                            </div>\n                          </Form>\n                        );\n                      }}\n                    </Formik>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChangePassword;\n","import axiosInstance from \"../../utils/axios\";\n\n//for login\nexport const login = (body) => axiosInstance.post(`auth/login`, body);\n//for logout\nexport const logout = (body) => axiosInstance.post(`auth/logout`, body);\n//for reset password\nexport const resetPassword = (body) =>\n  axiosInstance.post(`api/v1/user-app/password-reset/`, body);\nexport const confirmPassword = (body) =>\n  axiosInstance.post(`api/v1/user-app/password-reset/confirm/`, body);\nexport const changePassword = ( body) =>\n  axiosInstance.patch(`auth/change-password`, body);\n\n// update signature\nexport const updateSignature = (body) =>\n  axiosInstance.patch(`auth/update-signature`, body);","import { authConstants } from \"./constants\";\n// actions\nexport const loadingAction = () => ({\n  type: authConstants.LOADING,\n});\nexport const loadingResetAction = () => ({\n  type: authConstants.LOADING_RESET,\n});\nexport const LoadingResetPasswordAction = () => ({\n  type: authConstants.LOADING_RESET_PASSWORD,\n});\n\nexport const loginSuccessAction = (data) => ({\n  type: authConstants.LOGIN_SUCCESS,\n  payload: data,\n});\nexport const loginFailAction = (error) => ({\n  type: authConstants.LOGIN_FAIL,\n  payload: error,\n});\nexport const logoutSuccessAction = () => ({\n  type: authConstants.LOGOUT_SUCCESS,\n});\nexport const logoutFailAction = (error) => ({\n  type: authConstants.LOGOUT_FAIL,\n  payload: error,\n});\nexport const resetSuccessAction = (data) => ({\n  type: authConstants.RESET_SUCCESS,\n  payload: data,\n});\nexport const resetFailAction = (error) => ({\n  type: authConstants.RESET_FAIL,\n  payload: error,\n});\nexport const confirmSuccessAction = () => ({\n  type: authConstants.PASSWORD_CONFIRM_SUCCESS,\n});\nexport const confirmFailAction = (error) => ({\n  type: authConstants.PASSWORD_CONFIRM_FAIL,\n  payload: error,\n});\nexport const changePasswordSuccessAction = (response) => ({\n  type: authConstants.PASSWORD_CHANGE_SUCCESS,\n  payload: response,\n});\n\nexport const changePasswordFailAction = (error) => ({\n  type: authConstants.PASSWORD_CHANGE_FAIL,\n  payload: error,\n});\nexport const getAllBranchesSuccessAction = (data) => ({\n  type: authConstants.GET_ALL_BRANCHES_SUCCESS,\n  payload: data,\n});\nexport const getAllBranchesFailAction = (error) => ({\n  type: authConstants.GET_ALL_BRANCHES_FAIL,\n  payload: error,\n});\n\nexport const updateSignatureSuccessAction = (data) => ({\n  type: authConstants.UPDATE_SIGNATURE_SUCCESS,\n  payload: data,\n});\n\nexport const updateSignatureFailAction = (error) => ({\n  type: authConstants.UPDATE_SIGNATURE_FAIL,\n  payload: error,\n});\n","import * as API from \"./api\";\nimport * as action from \"./action\";\nimport { successFunction, errorFunction } from \"../../Component/Alert\";\nimport { authConstants } from \"./constants\";\n//login\nexport const login = (username, password) => async (dispatch) => {\n  try {\n    dispatch(action.loadingAction());\n    const body = { username, password };\n    const { data } = await API.login(body);\n    //for storing the states when login success on the basis of which we can change the route of page.\n    successFunction(`Welcome ${data.user.username}`);\n    dispatch(action.loginSuccessAction(data));\n  } catch (error) {\n    console.log(error, \"error\");\n    errorFunction(error);\n    dispatch(action.loginFailAction(error));\n  }\n};\n//logout function\nexport const logout = (token) => async (dispatch) => {\n  try {\n    dispatch(action.loadingAction());\n    const body = { refresh: token };\n    await API.logout(body);\n    dispatch(action.logoutSuccessAction());\n    successFunction(`You have been successfully logged out.`);\n  } catch (error) {\n    dispatch(action.logoutFailAction(error));\n    errorFunction(error);\n  }\n};\n//send email\nexport const resetPassword = (email) => async (dispatch) => {\n  try {\n    dispatch(action.LoadingResetPasswordAction());\n    const body = JSON.stringify({ email: email });\n    const { data } = await API.resetPassword(body);\n    dispatch(action.resetSuccessAction(data));\n    successFunction(`Email send successfully `);\n  } catch (error) {\n    dispatch(action.resetFailAction(error));\n    errorFunction(\n      `There is no active user associated with this e-mail address  || the password can not be changed `\n    );\n  }\n};\nexport const confirmPassword =\n  (password, confirm_password, token, history) => async (dispatch) => {\n    try {\n      dispatch(action.loadingResetAction());\n      const body = JSON.stringify({ token, password, confirm_password });\n      const { data } = await API.confirmPassword(body);\n      dispatch(action.confirmSuccessAction(data));\n      successFunction(`Password has been reset successfully `);\n      dispatch({ type: authConstants.RESET_SUCCESS, payload: [] });\n      history.push(\"/\");\n    } catch (error) {\n      dispatch(action.confirmFailAction(error));\n      errorFunction(`Failed to reset Password`);\n    }\n  };\n\nexport const changePassword =\n  (old_password, password, confirm_password, history) => async (dispatch) => {\n    try {\n      dispatch(action.loadingAction());\n      const body = JSON.stringify({ password, old_password, confirm_password });\n      const response = await API.changePassword(body);\n      dispatch(action.changePasswordSuccessAction(response));\n      successFunction(`Password changed successfully `);\n      history.push(\"/\");\n    } catch (error) {\n      dispatch(action.changePasswordFailAction(error));\n      errorFunction(error);\n    }\n  };\n\n// update signature\nexport const updateSignature = (signature) => async (dispatch) => {\n  try {\n    dispatch(action.loadingAction());\n    const body = JSON.stringify({ signature, signatureUpdating: true });\n    const response = await API.updateSignature(body);\n    successFunction(`Signature updated successfully`);\n    dispatch(action.updateSignatureSuccessAction(response?.data));\n    return true;\n  } catch (error) {\n    dispatch(action.updateSignatureFailAction(error));\n    errorFunction(error);\n  }\n};\n","import axios from \"axios\";\nimport { store } from \"../Redux/store\";\nimport { authConstants } from \"../Redux/Auth/constants\";\nimport { toast } from \"react-toastify\";\n\n//creating axios instance\nexport const publicAxiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_BASE_URL,\n});\nexport const printerAxiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_PRINTER_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\nconst axiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n//interceptor\n//request handling\naxiosInstance.interceptors.request.use(\n  (config) => {\n    // if (!window.navigator.onLine) {\n    //   return Promise.reject(\"No Internet\");\n    // }\n    if (window.navigator.onLine) {\n      config.headers[\"Authorization\"] = localStorage.getItem(\"accessToken\")\n        ? `Bearer ${localStorage.getItem(\"accessToken\")}`\n        : null;\n      config.baseURL = process.env.REACT_APP_BASE_URL;\n      return config;\n    }\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n//response handling\naxiosInstance.interceptors.response.use(\n  (res) => res,\n  async (error) => {\n    //refresh token\n\n    const originalRequest = error.config;\n    //when refresh token is also not valid\n    if (\n      error.response.status === 401 &&\n      originalRequest.url === `auth/token/refresh`\n    ) {\n      store.dispatch({ type: authConstants.AUTH_ERROR });\n      // return Promise.reject(error.response?.data.code);\n      // return toast.error(`Refresh Token Expired. Please Login.`, {\n      //   autoClose: 1200,\n      // });\n    }\n    //accessing new access token from refresh token\n    if (\n      error.response?.data.code === \"token_not_valid\" &&\n      !originalRequest._retry\n    ) {\n      //call for refresh token\n      originalRequest._retry = true;\n      try {\n        const body = JSON.stringify({\n          refresh: localStorage.getItem(\"refreshToken\"),\n        });\n        localStorage.removeItem(\"accessToken\");\n        const response = await axiosInstance.post(`auth/token/refresh`, body);\n        if (response.status === 200) {\n          localStorage.setItem(\"accessToken\", response?.data.access);\n          originalRequest.headers[\n            \"Authorization\"\n          ] = `Bearer ${response?.data.access}`;\n          return axiosInstance(originalRequest);\n        }\n      } catch (error) {\n        store.dispatch({\n          type: authConstants.AUTH_ERROR,\n        });\n\n        // return toast.error(`${error.response.data.error}`);\n        // return Promise.reject(error.response?.data.error);\n      }\n      // return store.dispatch({ type: AUTH_ERROR });\n    }\n    //no Internet\n    if (error === \"No Internet\") {\n      toast.error(`No Internet Connection !!!`);\n      // return Promise.reject(`No Internet`);\n    }\n    //server down\n    if (error.message === \"Network Error\") {\n      toast.error(\"Internal Server Error. Contact IT manager !!!\", {\n        autoClose: 1200,\n      });\n      // return Promise.reject(`Internal Server Error. Contact IT manager !!!`);\n    }\n    if (error.response?.status === 500) {\n      toast.error(\"Internal Server Error. Contact IT manager !!!\", {\n        autoClose: 1200,\n      });\n      // return Promise.reject(`Internal Server Error. Contact IT manager !!!`);\n    }\n    if (error.response?.status === 404) {\n      toast.error(\"Page Not Found !!!!!\", { autoClose: 1200 });\n    }\n    //unauthorized user\n    if (\n      error.response?.status === 401 ||\n      error.message === \"Invalid token specified\"\n    ) {\n      store.dispatch({ type: authConstants.AUTH_ERROR });\n      // toast.error(\"Unauthorized User\", { autoClose: 1200 });\n\n      return Promise.reject(error.response.data.detail);\n    }\n    //error between 400\n    const expectedError =\n      error.response &&\n      error.response.status >= 400 &&\n      error.response.status < 500;\n    if (expectedError) {\n      if (error.response.data.detail) {\n        return Promise.reject(`${error.response.data.detail}`);\n      } else {\n        return Promise.reject(`${error.response.statusText}`);\n      }\n    }\n    return Promise.reject(error);\n  }\n);\nexport default axiosInstance;\n"],"names":["toast","errorFunction","error","errorMessage","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","successFunction","data","successMessage","infoFunction","infoMessage","props","className","children","useSelector","state","auth","userid","dispatch","useDispatch","history","useHistory","useState","type","setType","type1","setType1","type2","setType2","validationSchema","Yup","shape","old_password","required","password","matches","confirm_password","oneOf","handleClick","handleClick1","handleClick2","initialValues","onSubmit","values","changePassword","formik","autoComplete","htmlFor","style","name","placeholder","onClick","component","TextError","login","body","axiosInstance","resetPassword","confirmPassword","updateSignature","loadingAction","authConstants","loginSuccessAction","payload","resetSuccessAction","changePasswordSuccessAction","response","username","action","API","user","console","log","email","JSON","stringify","token","push","signature","signatureUpdating","printerAxiosInstance","axios","baseURL","process","headers","interceptors","request","use","config","window","navigator","onLine","localStorage","getItem","Promise","reject","res","originalRequest","status","url","store","code","_retry","refresh","removeItem","post","setItem","access","message","detail","statusText"],"sourceRoot":""}