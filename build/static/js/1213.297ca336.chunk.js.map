{"version":3,"file":"static/js/1213.297ca336.chunk.js","mappings":"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","sources":["Component/Alert/index.js","Component/Spinner/Spinner.js","Component/TextError/TextError.js","Pages/ResetPassword/ResetPassword.js","Redux/Auth/api.js","Redux/Auth/action.js","Redux/Auth/thunk.js","utils/axios.js"],"sourcesContent":["import { toast } from \"react-toastify\";\ntoast.configure();\n//toast for error\nexport const errorFunction = (error) => {\n  const errorMessage = typeof error === \"string\" ? error : \"error\";\n  toast.error(errorMessage, {\n    position: \"top-right\",\n    autoClose: 2500,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  });\n};\n\n//toast for success\nexport const successFunction = (data) => {\n  const successMessage = typeof data === \"string\" ? data : \"success\";\n  toast.success(successMessage, {\n    position: \"top-right\",\n    autoClose: 2500,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  });\n};\n//toast for info\nexport const infoFunction = (data) => {\n  const infoMessage = typeof data === \"string\" ? data : \"success\";\n  toast.info(infoMessage, {\n    position: \"top-right\",\n    autoClose: 2500,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  });\n};\n","import React from \"react\";\nimport spinner from \"../../assets/spinner.gif\";\nconst Spinner = () => {\n  return (\n    <img\n      src={spinner}\n      alt=\"spinner\"\n      // color={color}\n      height=\"50px\"\n    />\n  );\n};\n\nexport default Spinner;\n","import React from \"react\";\nimport \"./TextError.css\";\nconst TextError = (props) => {\n  return <div className=\"error\">{props.children}</div>;\n};\n\nexport default TextError;\n","import React, { useEffect } from \"react\";\nimport TextError from \"../../Component/TextError/TextError\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Form, Field, Formik, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport \"../Login/Login.css\";\nimport Spinner from \"../../Component/Spinner/Spinner\";\nimport { resetPassword } from \"../../Redux/Auth/thunk\";\nimport Footer from \"../../Dashboard/Footer\";\nimport Select from \"react-select\";\nconst ResetPassword = () => {\n  const loading = useSelector((state) => state.auth.loadingResetPassword);\n  const message = useSelector((state) => state.auth.message);\n  const branches = useSelector((state) => state.auth.branches);\n  const initialValues = {\n    email: \"\",\n  };\n  //validation rule for the form field in formik\n  const validationSchema = Yup.object().shape({\n    email: Yup.string().email().required(\"Email is required\"),\n  });\n  const dispatch = useDispatch();\n\n  //submit handler for formik\n  const onSubmit = (values) => {\n    dispatch(resetPassword(values.email));\n  };\n\n  return (\n    <>\n      <div className=\"login-bak\">\n        <div className=\"account-pages reset-container my-5\">\n          <div className=\"container\">\n            <div className=\"row justify-content-center\">\n              <div className=\"col-md-8 col-lg-6 col-xl-5\">\n                <div className=\"card overflow-hidden card-reset\">\n                  <div className=\"bg-primary waves-effect waves-light bg-soft\">\n                    <div className=\"row\">\n                      <div className=\"col-sm-12\">\n                        <div className=\"text-center m-3\">\n                          <h5 className=\"\">Reset Password</h5>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"card-body pt-0\">\n                    <div className=\"\">\n                      <Formik\n                        initialValues={initialValues}\n                        validationSchema={validationSchema}\n                        onSubmit={onSubmit}\n                      >\n                        {(formik) => {\n                          return (\n                            <Form\n                              autoComplete=\"off\"\n                              className=\"form-horizontal \"\n                            >\n                              <div className=\"mb-3 mt-3\">\n                                <label\n                                  htmlFor=\"username\"\n                                  className=\"form-label\"\n                                >\n                                  Email{\" \"}\n                                  <strong className=\"text-danger \">*</strong>\n                                </label>\n                                <Field\n                                  type=\"text\"\n                                  className=\"form-control textfield-login\"\n                                  name=\"email\"\n                                  placeholder=\"Enter Email\"\n                                />\n                                <ErrorMessage\n                                  name=\"email\"\n                                  component={TextError}\n                                />\n                              </div>\n                              <div className=\"mt-3 text-center d-grid\">\n                                <button\n                                  className=\"btn btn-primary waves-effect waves-light mt-4 m-3\"\n                                  type=\"submit\"\n                                  disabled={loading}\n                                >\n                                  Continue {loading && <Spinner />}\n                                </button>\n                              </div>\n                            </Form>\n                          );\n                        }}\n                      </Formik>\n                    </div>\n                  </div>\n                </div>\n                {/* <div className=\"mt-3 text-center text-white\">\n                  <div>\n                    <Footer />\n                  </div>\n                </div> */}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ResetPassword;\n","import axiosInstance from \"../../utils/axios\";\n\n//for login\nexport const login = (body) => axiosInstance.post(`auth/login`, body);\n//for logout\nexport const logout = (body) => axiosInstance.post(`auth/logout`, body);\n//for reset password\nexport const resetPassword = (body) =>\n  axiosInstance.post(`api/v1/user-app/password-reset/`, body);\nexport const confirmPassword = (body) =>\n  axiosInstance.post(`api/v1/user-app/password-reset/confirm/`, body);\nexport const changePassword = ( body) =>\n  axiosInstance.patch(`auth/change-password`, body);\n\n// update signature\nexport const updateSignature = (body) =>\n  axiosInstance.patch(`auth/update-signature`, body);","import { authConstants } from \"./constants\";\n// actions\nexport const loadingAction = () => ({\n  type: authConstants.LOADING,\n});\nexport const loadingResetAction = () => ({\n  type: authConstants.LOADING_RESET,\n});\nexport const LoadingResetPasswordAction = () => ({\n  type: authConstants.LOADING_RESET_PASSWORD,\n});\n\nexport const loginSuccessAction = (data) => ({\n  type: authConstants.LOGIN_SUCCESS,\n  payload: data,\n});\nexport const loginFailAction = (error) => ({\n  type: authConstants.LOGIN_FAIL,\n  payload: error,\n});\nexport const logoutSuccessAction = () => ({\n  type: authConstants.LOGOUT_SUCCESS,\n});\nexport const logoutFailAction = (error) => ({\n  type: authConstants.LOGOUT_FAIL,\n  payload: error,\n});\nexport const resetSuccessAction = (data) => ({\n  type: authConstants.RESET_SUCCESS,\n  payload: data,\n});\nexport const resetFailAction = (error) => ({\n  type: authConstants.RESET_FAIL,\n  payload: error,\n});\nexport const confirmSuccessAction = () => ({\n  type: authConstants.PASSWORD_CONFIRM_SUCCESS,\n});\nexport const confirmFailAction = (error) => ({\n  type: authConstants.PASSWORD_CONFIRM_FAIL,\n  payload: error,\n});\nexport const changePasswordSuccessAction = (response) => ({\n  type: authConstants.PASSWORD_CHANGE_SUCCESS,\n  payload: response,\n});\n\nexport const changePasswordFailAction = (error) => ({\n  type: authConstants.PASSWORD_CHANGE_FAIL,\n  payload: error,\n});\nexport const getAllBranchesSuccessAction = (data) => ({\n  type: authConstants.GET_ALL_BRANCHES_SUCCESS,\n  payload: data,\n});\nexport const getAllBranchesFailAction = (error) => ({\n  type: authConstants.GET_ALL_BRANCHES_FAIL,\n  payload: error,\n});\n\nexport const updateSignatureSuccessAction = (data) => ({\n  type: authConstants.UPDATE_SIGNATURE_SUCCESS,\n  payload: data,\n});\n\nexport const updateSignatureFailAction = (error) => ({\n  type: authConstants.UPDATE_SIGNATURE_FAIL,\n  payload: error,\n});\n","import * as API from \"./api\";\nimport * as action from \"./action\";\nimport { successFunction, errorFunction } from \"../../Component/Alert\";\nimport { authConstants } from \"./constants\";\n//login\nexport const login = (username, password) => async (dispatch) => {\n  try {\n    dispatch(action.loadingAction());\n    const body = { username, password };\n    const { data } = await API.login(body);\n    //for storing the states when login success on the basis of which we can change the route of page.\n    successFunction(`Welcome ${data.user.username}`);\n    dispatch(action.loginSuccessAction(data));\n  } catch (error) {\n    console.log(error, \"error\");\n    errorFunction(error);\n    dispatch(action.loginFailAction(error));\n  }\n};\n//logout function\nexport const logout = (token) => async (dispatch) => {\n  try {\n    dispatch(action.loadingAction());\n    const body = { refresh: token };\n    await API.logout(body);\n    dispatch(action.logoutSuccessAction());\n    successFunction(`You have been successfully logged out.`);\n  } catch (error) {\n    dispatch(action.logoutFailAction(error));\n    errorFunction(error);\n  }\n};\n//send email\nexport const resetPassword = (email) => async (dispatch) => {\n  try {\n    dispatch(action.LoadingResetPasswordAction());\n    const body = JSON.stringify({ email: email });\n    const { data } = await API.resetPassword(body);\n    dispatch(action.resetSuccessAction(data));\n    successFunction(`Email send successfully `);\n  } catch (error) {\n    dispatch(action.resetFailAction(error));\n    errorFunction(\n      `There is no active user associated with this e-mail address  || the password can not be changed `\n    );\n  }\n};\nexport const confirmPassword =\n  (password, confirm_password, token, history) => async (dispatch) => {\n    try {\n      dispatch(action.loadingResetAction());\n      const body = JSON.stringify({ token, password, confirm_password });\n      const { data } = await API.confirmPassword(body);\n      dispatch(action.confirmSuccessAction(data));\n      successFunction(`Password has been reset successfully `);\n      dispatch({ type: authConstants.RESET_SUCCESS, payload: [] });\n      history.push(\"/\");\n    } catch (error) {\n      dispatch(action.confirmFailAction(error));\n      errorFunction(`Failed to reset Password`);\n    }\n  };\n\nexport const changePassword =\n  (old_password, password, confirm_password, history) => async (dispatch) => {\n    try {\n      dispatch(action.loadingAction());\n      const body = JSON.stringify({ password, old_password, confirm_password });\n      const response = await API.changePassword(body);\n      dispatch(action.changePasswordSuccessAction(response));\n      successFunction(`Password changed successfully `);\n      history.push(\"/\");\n    } catch (error) {\n      dispatch(action.changePasswordFailAction(error));\n      errorFunction(error);\n    }\n  };\n\n// update signature\nexport const updateSignature = (signature) => async (dispatch) => {\n  try {\n    dispatch(action.loadingAction());\n    const body = JSON.stringify({ signature, signatureUpdating: true });\n    const response = await API.updateSignature(body);\n    successFunction(`Signature updated successfully`);\n    dispatch(action.updateSignatureSuccessAction(response?.data));\n    return true;\n  } catch (error) {\n    dispatch(action.updateSignatureFailAction(error));\n    errorFunction(error);\n  }\n};\n","import axios from \"axios\";\nimport { store } from \"../Redux/store\";\nimport { authConstants } from \"../Redux/Auth/constants\";\nimport { toast } from \"react-toastify\";\n\n//creating axios instance\nexport const publicAxiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_BASE_URL,\n});\nexport const printerAxiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_PRINTER_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\nconst axiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n//interceptor\n//request handling\naxiosInstance.interceptors.request.use(\n  (config) => {\n    // if (!window.navigator.onLine) {\n    //   return Promise.reject(\"No Internet\");\n    // }\n    if (window.navigator.onLine) {\n      config.headers[\"Authorization\"] = localStorage.getItem(\"accessToken\")\n        ? `Bearer ${localStorage.getItem(\"accessToken\")}`\n        : null;\n      config.baseURL = process.env.REACT_APP_BASE_URL;\n      return config;\n    }\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n//response handling\naxiosInstance.interceptors.response.use(\n  (res) => res,\n  async (error) => {\n    //refresh token\n\n    const originalRequest = error.config;\n    //when refresh token is also not valid\n    if (\n      error.response.status === 401 &&\n      originalRequest.url === `auth/token/refresh`\n    ) {\n      store.dispatch({ type: authConstants.AUTH_ERROR });\n      // return Promise.reject(error.response?.data.code);\n      // return toast.error(`Refresh Token Expired. Please Login.`, {\n      //   autoClose: 1200,\n      // });\n    }\n    //accessing new access token from refresh token\n    if (\n      error.response?.data.code === \"token_not_valid\" &&\n      !originalRequest._retry\n    ) {\n      //call for refresh token\n      originalRequest._retry = true;\n      try {\n        const body = JSON.stringify({\n          refresh: localStorage.getItem(\"refreshToken\"),\n        });\n        localStorage.removeItem(\"accessToken\");\n        const response = await axiosInstance.post(`auth/token/refresh`, body);\n        if (response.status === 200) {\n          localStorage.setItem(\"accessToken\", response?.data.access);\n          originalRequest.headers[\n            \"Authorization\"\n          ] = `Bearer ${response?.data.access}`;\n          return axiosInstance(originalRequest);\n        }\n      } catch (error) {\n        store.dispatch({\n          type: authConstants.AUTH_ERROR,\n        });\n\n        // return toast.error(`${error.response.data.error}`);\n        // return Promise.reject(error.response?.data.error);\n      }\n      // return store.dispatch({ type: AUTH_ERROR });\n    }\n    //no Internet\n    if (error === \"No Internet\") {\n      toast.error(`No Internet Connection !!!`);\n      // return Promise.reject(`No Internet`);\n    }\n    //server down\n    if (error.message === \"Network Error\") {\n      toast.error(\"Internal Server Error. Contact IT manager !!!\", {\n        autoClose: 1200,\n      });\n      // return Promise.reject(`Internal Server Error. Contact IT manager !!!`);\n    }\n    if (error.response?.status === 500) {\n      toast.error(\"Internal Server Error. Contact IT manager !!!\", {\n        autoClose: 1200,\n      });\n      // return Promise.reject(`Internal Server Error. Contact IT manager !!!`);\n    }\n    if (error.response?.status === 404) {\n      toast.error(\"Page Not Found !!!!!\", { autoClose: 1200 });\n    }\n    //unauthorized user\n    if (\n      error.response?.status === 401 ||\n      error.message === \"Invalid token specified\"\n    ) {\n      store.dispatch({ type: authConstants.AUTH_ERROR });\n      // toast.error(\"Unauthorized User\", { autoClose: 1200 });\n\n      return Promise.reject(error.response.data.detail);\n    }\n    //error between 400\n    const expectedError =\n      error.response &&\n      error.response.status >= 400 &&\n      error.response.status < 500;\n    if (expectedError) {\n      if (error.response.data.detail) {\n        return Promise.reject(`${error.response.data.detail}`);\n      } else {\n        return Promise.reject(`${error.response.statusText}`);\n      }\n    }\n    return Promise.reject(error);\n  }\n);\nexport default axiosInstance;\n"],"names":["toast","errorFunction","error","errorMessage","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","successFunction","data","successMessage","infoFunction","infoMessage","src","spinner","alt","height","props","className","children","loading","useSelector","state","auth","loadingResetPassword","validationSchema","message","branches","Yup","shape","email","required","dispatch","useDispatch","initialValues","onSubmit","values","resetPassword","formik","autoComplete","htmlFor","type","name","placeholder","component","TextError","disabled","login","body","axiosInstance","confirmPassword","changePassword","updateSignature","loadingAction","authConstants","loginSuccessAction","payload","resetSuccessAction","changePasswordSuccessAction","response","username","password","action","API","user","console","log","JSON","stringify","confirm_password","token","history","push","old_password","signature","signatureUpdating","printerAxiosInstance","axios","baseURL","process","headers","interceptors","request","use","config","window","navigator","onLine","localStorage","getItem","Promise","reject","res","originalRequest","status","url","store","code","_retry","refresh","removeItem","post","setItem","access","detail","statusText"],"sourceRoot":""}