{"version":3,"file":"static/js/6497.a0bf4ee6.chunk.js","mappings":"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","sources":["Component/Alert/index.js","Pages/User/UpdateSignature.js","Redux/Auth/api.js","Redux/Auth/action.js","Redux/Auth/thunk.js","utils/axios.js"],"sourcesContent":["import { toast } from \"react-toastify\";\ntoast.configure();\n//toast for error\nexport const errorFunction = (error) => {\n  const errorMessage = typeof error === \"string\" ? error : \"error\";\n  toast.error(errorMessage, {\n    position: \"top-right\",\n    autoClose: 2500,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  });\n};\n\n//toast for success\nexport const successFunction = (data) => {\n  const successMessage = typeof data === \"string\" ? data : \"success\";\n  toast.success(successMessage, {\n    position: \"top-right\",\n    autoClose: 2500,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  });\n};\n//toast for info\nexport const infoFunction = (data) => {\n  const infoMessage = typeof data === \"string\" ? data : \"success\";\n  toast.info(infoMessage, {\n    position: \"top-right\",\n    autoClose: 2500,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n  });\n};\n","import React, { useState, useEffect } from \"react\";\nimport signatureImage from \"../../assets/signature.gif\";\nimport \"./style.css\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { updateSignature } from \"../../Redux/Auth/thunk\";\nimport { errorFunction, successFunction } from \"../../Component/Alert\";\n\nconst UpdateSignature = () => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const [signatures, setSignatures] = useState([\"\"]);\n  const [signaturesText, setSignaturesText] = useState([\"\"]);\n  const userSignature = useSelector((state) => state.auth.signaturePhoto);\n  console.log(userSignature, \"sig\");\n\n  const handleSignatureCapture = (pos) => {\n    window?.captureSignature(\n      signatures,\n      setSignatures,\n      signaturesText,\n      setSignaturesText,\n      pos\n    );\n  };\n\n  const handleSignatureClear = async (pos) => {\n    const updatedSignatures = signatures?.map((sign, i) => {\n      if (i === pos) {\n        return \"\";\n      } else {\n        return sign;\n      }\n    });\n\n    const updatedSignaturesText = signaturesText?.map((sign, i) => {\n      if (i === pos) {\n        return \"\";\n      } else {\n        return sign;\n      }\n    });\n    setSignatures(updatedSignatures);\n    setSignaturesText(updatedSignaturesText);\n  };\n  const handleSave = async () => {\n    if (signatures[0] !== \"\") {\n      const result = await dispatch(updateSignature(signatures[0]));\n      if (result) {\n        history.push(\"/\");\n      }\n    } else {\n      errorFunction(\"Please capture the signature first.\");\n    }\n  };\n\n  useEffect(() => {\n    window.startSignatureService();\n  }, []);\n\n  return (\n    <div className=\"signature-wrapper card p-5\">\n      <h3 className=\"text-center\">Update Signature</h3>\n      <div className=\"signature-container\">\n        {signatures[0] === \"\" ? (\n          <div className=\"signature-card card\">\n            {userSignature ? (\n              <img src={userSignature} alt=\"default-signature\" />\n            ) : (\n              <img src={signatureImage} alt=\"default-signature\" />\n            )}\n          </div>\n        ) : (\n          <div className=\"signature-card card\">\n            <img src={signatures[0]} alt=\"signature\" />\n          </div>\n        )}\n      </div>\n      <div className=\"d-flex justify-content-center align-items-center gap-2 my-1\">\n        <button\n          type=\"button\"\n          className=\"btn btn-sm btn-primary mr-2\"\n          onClick={() => handleSignatureCapture(0)}\n          disabled={signatures[0] !== \"\"}\n        >\n          Capture\n        </button>\n        <button\n          type=\"button\"\n          className=\"btn btn-sm btn-danger mr-2\"\n          onClick={() => handleSignatureClear(0)}\n          disabled={signatures[0] === \"\"}\n        >\n          Clear\n        </button>\n\n        <button\n          type=\"button\"\n          className=\"btn btn-sm btn-success\"\n          onClick={handleSave}\n          disabled={signatures[0] === \"\"}\n        >\n          Save\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default UpdateSignature;\n","import axiosInstance from \"../../utils/axios\";\n\n//for login\nexport const login = (body) => axiosInstance.post(`auth/login`, body);\n//for logout\nexport const logout = (body) => axiosInstance.post(`auth/logout`, body);\n//for reset password\nexport const resetPassword = (body) =>\n  axiosInstance.post(`api/v1/user-app/password-reset/`, body);\nexport const confirmPassword = (body) =>\n  axiosInstance.post(`api/v1/user-app/password-reset/confirm/`, body);\nexport const changePassword = ( body) =>\n  axiosInstance.patch(`auth/change-password`, body);\n\n// update signature\nexport const updateSignature = (body) =>\n  axiosInstance.patch(`auth/update-signature`, body);","import { authConstants } from \"./constants\";\n// actions\nexport const loadingAction = () => ({\n  type: authConstants.LOADING,\n});\nexport const loadingResetAction = () => ({\n  type: authConstants.LOADING_RESET,\n});\nexport const LoadingResetPasswordAction = () => ({\n  type: authConstants.LOADING_RESET_PASSWORD,\n});\n\nexport const loginSuccessAction = (data) => ({\n  type: authConstants.LOGIN_SUCCESS,\n  payload: data,\n});\nexport const loginFailAction = (error) => ({\n  type: authConstants.LOGIN_FAIL,\n  payload: error,\n});\nexport const logoutSuccessAction = () => ({\n  type: authConstants.LOGOUT_SUCCESS,\n});\nexport const logoutFailAction = (error) => ({\n  type: authConstants.LOGOUT_FAIL,\n  payload: error,\n});\nexport const resetSuccessAction = (data) => ({\n  type: authConstants.RESET_SUCCESS,\n  payload: data,\n});\nexport const resetFailAction = (error) => ({\n  type: authConstants.RESET_FAIL,\n  payload: error,\n});\nexport const confirmSuccessAction = () => ({\n  type: authConstants.PASSWORD_CONFIRM_SUCCESS,\n});\nexport const confirmFailAction = (error) => ({\n  type: authConstants.PASSWORD_CONFIRM_FAIL,\n  payload: error,\n});\nexport const changePasswordSuccessAction = (response) => ({\n  type: authConstants.PASSWORD_CHANGE_SUCCESS,\n  payload: response,\n});\n\nexport const changePasswordFailAction = (error) => ({\n  type: authConstants.PASSWORD_CHANGE_FAIL,\n  payload: error,\n});\nexport const getAllBranchesSuccessAction = (data) => ({\n  type: authConstants.GET_ALL_BRANCHES_SUCCESS,\n  payload: data,\n});\nexport const getAllBranchesFailAction = (error) => ({\n  type: authConstants.GET_ALL_BRANCHES_FAIL,\n  payload: error,\n});\n\nexport const updateSignatureSuccessAction = (data) => ({\n  type: authConstants.UPDATE_SIGNATURE_SUCCESS,\n  payload: data,\n});\n\nexport const updateSignatureFailAction = (error) => ({\n  type: authConstants.UPDATE_SIGNATURE_FAIL,\n  payload: error,\n});\n","import * as API from \"./api\";\nimport * as action from \"./action\";\nimport { successFunction, errorFunction } from \"../../Component/Alert\";\nimport { authConstants } from \"./constants\";\n//login\nexport const login = (username, password) => async (dispatch) => {\n  try {\n    dispatch(action.loadingAction());\n    const body = { username, password };\n    const { data } = await API.login(body);\n    //for storing the states when login success on the basis of which we can change the route of page.\n    successFunction(`Welcome ${data.user.username}`);\n    dispatch(action.loginSuccessAction(data));\n  } catch (error) {\n    console.log(error, \"error\");\n    errorFunction(error);\n    dispatch(action.loginFailAction(error));\n  }\n};\n//logout function\nexport const logout = (token) => async (dispatch) => {\n  try {\n    dispatch(action.loadingAction());\n    const body = { refresh: token };\n    await API.logout(body);\n    dispatch(action.logoutSuccessAction());\n    successFunction(`You have been successfully logged out.`);\n  } catch (error) {\n    dispatch(action.logoutFailAction(error));\n    errorFunction(error);\n  }\n};\n//send email\nexport const resetPassword = (email) => async (dispatch) => {\n  try {\n    dispatch(action.LoadingResetPasswordAction());\n    const body = JSON.stringify({ email: email });\n    const { data } = await API.resetPassword(body);\n    dispatch(action.resetSuccessAction(data));\n    successFunction(`Email send successfully `);\n  } catch (error) {\n    dispatch(action.resetFailAction(error));\n    errorFunction(\n      `There is no active user associated with this e-mail address  || the password can not be changed `\n    );\n  }\n};\nexport const confirmPassword =\n  (password, confirm_password, token, history) => async (dispatch) => {\n    try {\n      dispatch(action.loadingResetAction());\n      const body = JSON.stringify({ token, password, confirm_password });\n      const { data } = await API.confirmPassword(body);\n      dispatch(action.confirmSuccessAction(data));\n      successFunction(`Password has been reset successfully `);\n      dispatch({ type: authConstants.RESET_SUCCESS, payload: [] });\n      history.push(\"/\");\n    } catch (error) {\n      dispatch(action.confirmFailAction(error));\n      errorFunction(`Failed to reset Password`);\n    }\n  };\n\nexport const changePassword =\n  (old_password, password, confirm_password, history) => async (dispatch) => {\n    try {\n      dispatch(action.loadingAction());\n      const body = JSON.stringify({ password, old_password, confirm_password });\n      const response = await API.changePassword(body);\n      dispatch(action.changePasswordSuccessAction(response));\n      successFunction(`Password changed successfully `);\n      history.push(\"/\");\n    } catch (error) {\n      dispatch(action.changePasswordFailAction(error));\n      errorFunction(error);\n    }\n  };\n\n// update signature\nexport const updateSignature = (signature) => async (dispatch) => {\n  try {\n    dispatch(action.loadingAction());\n    const body = JSON.stringify({ signature, signatureUpdating: true });\n    const response = await API.updateSignature(body);\n    successFunction(`Signature updated successfully`);\n    dispatch(action.updateSignatureSuccessAction(response?.data));\n    return true;\n  } catch (error) {\n    dispatch(action.updateSignatureFailAction(error));\n    errorFunction(error);\n  }\n};\n","import axios from \"axios\";\nimport { store } from \"../Redux/store\";\nimport { authConstants } from \"../Redux/Auth/constants\";\nimport { toast } from \"react-toastify\";\n\n//creating axios instance\nexport const publicAxiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_BASE_URL,\n});\nexport const printerAxiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_PRINTER_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\nconst axiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n//interceptor\n//request handling\naxiosInstance.interceptors.request.use(\n  (config) => {\n    // if (!window.navigator.onLine) {\n    //   return Promise.reject(\"No Internet\");\n    // }\n    if (window.navigator.onLine) {\n      config.headers[\"Authorization\"] = localStorage.getItem(\"accessToken\")\n        ? `Bearer ${localStorage.getItem(\"accessToken\")}`\n        : null;\n      config.baseURL = process.env.REACT_APP_BASE_URL;\n      return config;\n    }\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n//response handling\naxiosInstance.interceptors.response.use(\n  (res) => res,\n  async (error) => {\n    //refresh token\n\n    const originalRequest = error.config;\n    //when refresh token is also not valid\n    if (\n      error.response.status === 401 &&\n      originalRequest.url === `auth/token/refresh`\n    ) {\n      store.dispatch({ type: authConstants.AUTH_ERROR });\n      // return Promise.reject(error.response?.data.code);\n      // return toast.error(`Refresh Token Expired. Please Login.`, {\n      //   autoClose: 1200,\n      // });\n    }\n    //accessing new access token from refresh token\n    if (\n      error.response?.data.code === \"token_not_valid\" &&\n      !originalRequest._retry\n    ) {\n      //call for refresh token\n      originalRequest._retry = true;\n      try {\n        const body = JSON.stringify({\n          refresh: localStorage.getItem(\"refreshToken\"),\n        });\n        localStorage.removeItem(\"accessToken\");\n        const response = await axiosInstance.post(`auth/token/refresh`, body);\n        if (response.status === 200) {\n          localStorage.setItem(\"accessToken\", response?.data.access);\n          originalRequest.headers[\n            \"Authorization\"\n          ] = `Bearer ${response?.data.access}`;\n          return axiosInstance(originalRequest);\n        }\n      } catch (error) {\n        store.dispatch({\n          type: authConstants.AUTH_ERROR,\n        });\n\n        // return toast.error(`${error.response.data.error}`);\n        // return Promise.reject(error.response?.data.error);\n      }\n      // return store.dispatch({ type: AUTH_ERROR });\n    }\n    //no Internet\n    if (error === \"No Internet\") {\n      toast.error(`No Internet Connection !!!`);\n      // return Promise.reject(`No Internet`);\n    }\n    //server down\n    if (error.message === \"Network Error\") {\n      toast.error(\"Internal Server Error. Contact IT manager !!!\", {\n        autoClose: 1200,\n      });\n      // return Promise.reject(`Internal Server Error. Contact IT manager !!!`);\n    }\n    if (error.response?.status === 500) {\n      toast.error(\"Internal Server Error. Contact IT manager !!!\", {\n        autoClose: 1200,\n      });\n      // return Promise.reject(`Internal Server Error. Contact IT manager !!!`);\n    }\n    if (error.response?.status === 404) {\n      toast.error(\"Page Not Found !!!!!\", { autoClose: 1200 });\n    }\n    //unauthorized user\n    if (\n      error.response?.status === 401 ||\n      error.message === \"Invalid token specified\"\n    ) {\n      store.dispatch({ type: authConstants.AUTH_ERROR });\n      // toast.error(\"Unauthorized User\", { autoClose: 1200 });\n\n      return Promise.reject(error.response.data.detail);\n    }\n    //error between 400\n    const expectedError =\n      error.response &&\n      error.response.status >= 400 &&\n      error.response.status < 500;\n    if (expectedError) {\n      if (error.response.data.detail) {\n        return Promise.reject(`${error.response.data.detail}`);\n      } else {\n        return Promise.reject(`${error.response.statusText}`);\n      }\n    }\n    return Promise.reject(error);\n  }\n);\nexport default axiosInstance;\n"],"names":["toast","errorFunction","error","errorMessage","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","successFunction","data","successMessage","infoFunction","infoMessage","history","useHistory","dispatch","useDispatch","useState","signatures","setSignatures","signaturesText","setSignaturesText","userSignature","useSelector","state","auth","signaturePhoto","console","log","handleSignatureClear","pos","updatedSignatures","map","sign","i","updatedSignaturesText","handleSave","updateSignature","push","useEffect","window","startSignatureService","className","src","alt","signatureImage","type","onClick","captureSignature","handleSignatureCapture","disabled","login","body","axiosInstance","resetPassword","confirmPassword","changePassword","loadingAction","authConstants","loginSuccessAction","payload","resetSuccessAction","changePasswordSuccessAction","response","username","password","action","API","user","email","JSON","stringify","confirm_password","token","old_password","signature","signatureUpdating","printerAxiosInstance","axios","baseURL","process","headers","interceptors","request","use","config","navigator","onLine","localStorage","getItem","Promise","reject","res","originalRequest","status","url","store","code","_retry","refresh","removeItem","post","setItem","access","message","detail","statusText"],"sourceRoot":""}