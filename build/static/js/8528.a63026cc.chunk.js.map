{"version":3,"file":"static/js/8528.a63026cc.chunk.js","mappings":"yJA0BA,IAtBc,SAAC,GAAwC,IAAtCA,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,cAEhC,OACE,iBAAKC,UAAU,2DAAf,WACE,eAAIA,UAAU,iBAAd,iCACEH,GAAUE,IACV,8CACkB,mBAChB,SAAC,IAAD,CAASE,QAAQ,MAAjB,UACE,oBACEH,QAASA,EACTE,UAAU,6CAFZ,WAIE,SAAC,MAAD,CAAQA,UAAU,cAAcE,KAAM,KAJxC,YAMS,Y,+NCoHrB,EA1H0B,SAAC,GAOpB,IANLC,EAMI,EANJA,YACAC,EAKI,EALJA,aAEAP,EAGI,EAHJA,OAEAQ,GACI,EAFJC,UAEI,EADJD,cAIME,IADQC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,KAAKC,UAChCH,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,KAAKH,YAC5CK,GAAcJ,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,KAAKE,eAC9CC,GAAuBL,EAAAA,EAAAA,KAC7B,SAACC,GAAD,OAAWA,EAAMK,qBADXD,mBAIFE,GAAWC,EAAAA,EAAAA,MAmBjB,OACE,+BACqB,OAAlBH,QAAkB,IAAlBA,OAAA,EAAAA,EAAoBI,QAAS,GAC5B,gBAAKjB,UAAU,OAAf,UACE,gBAAKA,UAAU,mBAAf,UACE,mBAAOA,UAAU,+CAAjB,WACE,4BACE,2BACE,eAAIkB,MAAM,MAAMC,MAAO,CAAEC,MAAO,MAAhC,kBAIA,eAAIF,MAAM,MAAV,sCACA,eAAIA,MAAM,MAAV,8BACA,eAAIA,MAAM,MAAV,qCACA,eAAIA,MAAM,MAAV,qCACA,eAAIA,MAAM,MAAV,uCAEA,eAAIA,MAAM,MAAV,0BAGJ,4BACqB,OAAlBL,QAAkB,IAAlBA,OAAA,EAAAA,EAAoBI,QAAS,GAC5BJ,EAAmBQ,KAAI,SAACC,EAAQC,GAC9B,IACEC,EAMEF,EANFE,GACAC,EAKEH,EALFG,uBACAC,EAIEJ,EAJFI,cACAC,EAGEL,EAHFK,qBACAC,EAEEN,EAFFM,oBACAC,EACEP,EADFO,sBAGF,OACE,2BACE,gBAAI7B,UAAU,UAAUmB,MAAO,CAAEC,MAAO,MAAxC,UACGhB,GAAgBD,EAAc,IAAMoB,EAAI,GAAI,QAG/C,wBAAKE,EAAyB,MAAQ,QACtC,wBAAKC,EAAgB,MAAQ,QAC7B,wBAAKC,EAAuB,MAAQ,QACpC,wBAAKC,KACL,wBAAKC,KAEL,yBACItB,GAAWK,KACX,SAACkB,EAAA,EAAD,CAAS7B,QAAQ,OAAjB,UACE,mBACEH,QAAS,kBA/DpB,SAAC0B,GAClBT,EAAS,CACPgB,KAAMC,EAAAA,EAAAA,wBACNC,QAAST,IAEXnB,GAAa,GA0D8B6B,CAAWV,IAC1BxB,UAAU,uCAFZ,UAIE,SAAC,MAAD,YAlBDwB,gBA2CvB,SAACW,EAAA,EAAD,CACEtC,OAAQA,EACRC,QAAS,kBAAMO,GAAa,IAC5BN,cAAeQ,GAAWK,O,+FCqMpC,G,kBAvTgC,SAAC,GAAiC,IAA/BP,EAA8B,EAA9BA,aACjC,GAD+D,EAAhBC,WACXE,EAAAA,EAAAA,KAClC,SAACC,GAAD,OAAWA,EAAMK,sBADXA,EAAR,EAAQA,kBAAmBsB,EAA3B,EAA2BA,KA0CrBC,EAAgB,CAcpBZ,uBAAwBW,GACpBtB,EACEA,EAAkBW,uBAEpB,GACJC,cAAeU,GACXtB,EACEA,EAAkBY,cAEpB,GACJE,oBAAqBQ,GACjBtB,EACEA,EAAkBc,oBAEpB,GACJC,sBAAuBO,GACnBtB,EACEA,EAAkBe,sBAEpB,IAGAS,EAAmBC,EAAAA,KAAaC,MAAM,CAwC1Cf,uBAAwBc,EAAAA,KACxBb,cAAea,EAAAA,KACfX,oBAAqBW,EAAAA,KAAaE,IAAI,GAAGC,IAAI,YAC7Cb,sBAAuBU,EAAAA,KAAaE,IAAI,GAAGC,IAAI,cAE3C3B,GAAWC,EAAAA,EAAAA,MACX2B,EAAQ,mCAAG,WAAOC,GAAP,8EACVR,EADU,gCAEQrB,GAAS8B,EAAAA,EAAAA,IAAwBD,IAFzC,OAEPE,EAFO,OAKXzC,GADEyC,GAJS,8BAUPC,EAAa,CACjBvB,GAAE,OAAEV,QAAF,IAAEA,OAAF,EAAEA,EAAmBU,GACvBoB,QAAO,UAAMA,IAZF,UAcQ7B,GAASiC,EAAAA,EAAAA,IAAwBD,IAdzC,QAcPD,EAdO,OAgBXzC,GADEyC,GAfS,4CAAH,sDAyDd,OACE,gBAAK9C,UAAU,MAAf,UACE,gBAAKA,UAAU,SAAf,UACE,SAAC,KAAD,CACEqC,cAAeA,EACfC,iBAAkBA,EAClBK,SAAUA,EAHZ,SAKG,SAACM,GACA,IAAQC,EAAkBD,EAAlBC,cACR,OACE,UAAC,KAAD,CAAMC,aAAa,MAAnB,WACE,iBAAKnD,UAAU,OAAf,WACE,iBAAKA,UAAU,MAAf,WACE,iBAAKA,UAAU,aAAf,WACE,mBAAOoD,QAAQ,OAAOpD,UAAU,sBAAhC,qCAEE,mBAAQA,UAAU,eAAlB,mBAEF,kBACE+B,KAAK,WACLsB,KAAK,yBACLrD,UAAU,wBACVsD,QAASL,EAAOL,OAAOnB,uBACvB8B,SAAU,SAACC,GACTN,EACE,yBACAM,EAAEC,OAAOH,aAIf,SAAC,KAAD,CACED,KAAK,yBACLK,UAAWC,EAAAA,QAIf,iBAAK3D,UAAU,aAAf,WACE,mBACEoD,QAAQ,gBACRpD,UAAU,sBAFZ,6BAKE,mBAAQA,UAAU,eAAlB,mBAEF,kBACE+B,KAAK,WACLsB,KAAK,gBACLrD,UAAU,wBACVsD,QAASL,EAAOL,OAAOlB,cACvB6B,SAAU,SAACC,GACTN,EAAc,gBAAiBM,EAAEC,OAAOH,aAG5C,SAAC,KAAD,CACED,KAAK,gBACLK,UAAWC,EAAAA,WAIjB,iBAAK3D,UAAU,MAAf,WACE,iBAAKA,UAAU,QAAf,WACE,mBACEoD,QAAQ,sBACRpD,UAAU,sBAFZ,oCAKE,mBAAQA,UAAU,eAAlB,mBAEF,SAAC,KAAD,CACE+B,KAAK,SACL6B,MAAOX,EAAOL,OAAOhB,oBACrByB,KAAK,sBACLE,SAAU,SAACC,GACTN,EAAc,sBAAuBM,EAAEC,OAAOG,QAEhD5D,UAAU,mBAEZ,SAAC,KAAD,CACEqD,KAAK,sBACLK,UAAWC,EAAAA,QAGf,iBAAK3D,UAAU,QAAf,WACE,mBACEoD,QAAQ,wBACRpD,UAAU,sBAFZ,sCAKE,mBAAQA,UAAU,eAAlB,mBAEF,SAAC,KAAD,CACE+B,KAAK,SACL6B,MAAOX,EAAOL,OAAOf,sBACrBwB,KAAK,wBACLE,SAAU,SAACC,GACTN,EACE,wBACAM,EAAEC,OAAOG,QAGb5D,UAAU,mBAEZ,SAAC,KAAD,CACEqD,KAAK,wBACLK,UAAWC,EAAAA,cAMnB,gBAAK3D,UAAU,qDAAf,UACE,SAAC6D,EAAA,EAAD,CACE9B,KAAK,SACL/B,UAAW,kBACX8D,cAAc,EACdC,MAAO3B,EAAO,SAAW,OACzBnC,QAASmC,EAAO,SAAW,uB,WCtL/C,EAnHiC,WAC/B,IAAM4B,GAAUC,EAAAA,EAAAA,MACVC,GAAQ1D,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMK,kBAAkBoD,SACvDC,GAAU3D,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMK,kBAAkBqD,WACzDC,GAAgB5D,EAAAA,EAAAA,KACpB,SAACC,GAAD,OAAWA,EAAMK,kBAAkBsD,iBAE/BtD,GAAoBN,EAAAA,EAAAA,KACxB,SAACC,GAAD,OAAWA,EAAMK,kBAAkBA,qBAE/BsB,GAAO5B,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMK,kBAAkBsB,QACtDvC,GAASW,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMZ,OAAOA,UAC7CkB,GAAWC,EAAAA,EAAAA,MAGjB,GAAsCqD,EAAAA,EAAAA,UAAS,GAA/C,eAAOlE,EAAP,KAAoBmE,EAApB,KACA,GAAoDD,EAAAA,EAAAA,UAAS,GAA7D,eAAOE,EAAP,KAA2BC,EAA3B,KACA,GAAoDH,EAAAA,EAAAA,UAAS,GAA7D,eAAOI,EAAP,KAA2BC,EAA3B,KACA,GAAwCL,EAAAA,EAAAA,UAAS,IAAjD,eAAOjE,EAAP,KAAqBuE,EAArB,KACA,GAAkCN,EAAAA,EAAAA,WAAS,GAA3C,eAAO/D,EAAP,KAAkBD,EAAlB,KA0BA,OAvBAuE,EAAAA,EAAAA,YAAU,WACa,IAAjBxE,EAEAW,EADa,KAAXlB,GACOgF,EAAAA,EAAAA,IAAqBX,IAErBY,EAAAA,EAAAA,IAAajF,EAAQqE,IAGjB,KAAXrE,GACEO,IAAiB2E,EAAAA,GAGnBT,EAAe,GAFfvD,GAAS8D,EAAAA,EAAAA,IAAqBzE,MAMhCkE,EAAe,GACfE,EAAsB,GACtBE,EAAsB,GACtB3D,GAAS+D,EAAAA,EAAAA,IAAajF,EAAQO,OAGjC,CAACW,EAAUX,EAAcP,KAE1B,+BACE,iBAAKG,UAAU,GAAf,WACE,gBAAKA,UAAU,iBAAf,UACE,eAAIA,UAAU,oBAAd,kCAEF,iBACEA,UAAS,WACU,OAAjBc,QAAiB,IAAjBA,OAAA,EAAAA,EAAmBG,QAAS,EAAI,mBAAqB,IAFzD,WAKE,gBAAKjB,UAAU,cAAf,UACoB,OAAjBc,QAAiB,IAAjBA,OAAA,EAAAA,EAAmBG,QAAS,IAC3B,+BACE,gBAAKjB,UAAU,mBAAf,UACE,SAAC8B,EAAA,EAAD,CAAS7B,QAAQ,MAAjB,UACE,oBACED,UAAU,4DACVF,QAAS,kBAAMkE,EAAQgB,KAAK,4BAF9B,WAIE,SAAC,MAAD,CAAQhF,UAAU,SAJpB,qBAYTmE,IAAW,SAACc,EAAA,EAAD,IACXb,IAAiB,SAACa,EAAA,EAAD,KAChBd,IACA,SAAC,EAAD,CACEhE,YAAaA,EACbmE,eAAgBA,EAChBlE,aAAcA,EACduE,gBAAiBA,EACjBT,MAAOA,EACPK,mBAAoBA,EACpBC,sBAAuBA,EACvBC,mBAAoBA,EACpBC,sBAAuBA,EACvB7E,OAAQA,EACRS,UAAWA,EACXD,aAAcA,IAIjBC,IACC,SAAC4E,EAAA,EAAD,CACEC,OAAQ,wBACRC,MAAO,QACPlF,KAAM,WACNG,aAAcA,EACdC,UAAWA,EACX8B,KAAMA,EACNiD,YAAaC,EAAAA,GAPf,UASE,SAAC,EAAD,CACEjF,aAAcA,EACdC,UAAWA,EACX8B,KAAMA,gB,6NChHTS,EAA0B,SAAC0C,GAAD,OACrCC,EAAAA,GAAAA,KAAA,2BAA+CD,IAGpCvC,EAA0B,SAACxB,EAAI+D,GAAL,OACrCC,EAAAA,GAAAA,MAAA,mCAAgDhE,GAAM+D,IAG3CT,EAAe,SAACjF,EAAQO,GAAT,OAC1BoF,EAAAA,GAAAA,IAAA,kDAC6CpF,EAD7C,mBACoEP,K,WCjBzD4F,EAAgB,iBAAO,CAClC1D,KAAMC,EAAAA,EAAAA,6BASK0D,EAAoC,SAACC,GAAD,MAAW,CAC1D5D,KAAMC,EAAAA,EAAAA,+BACNC,QAAS0D,IAGEC,EAAiC,SAACC,GAAD,MAAY,CACxD9D,KAAMC,EAAAA,EAAAA,4BACNC,QAAS4D,IA+BEC,EAA+B,SAACH,GAAD,MAAW,CACrD5D,KAAMC,EAAAA,EAAAA,yBACNC,QAAS0D,I,WC/CEd,EAAuB,qDAAM,WAAO9D,GAAP,yFAEtCA,EAASgF,KAF6B,SFDxCP,EAAAA,GAAAA,IAAA,0DECwC,gBAG9BG,EAH8B,EAG9BA,KAER5E,EAASgF,EAAyCJ,IALZ,gDAOtC5E,EAASgF,EAAA,QACTC,EAAAA,EAAAA,IAAc,EAAD,IARyB,yDAAN,uDAYvBC,EAAkB,qDAAM,WAAOlF,GAAP,yFAEjCA,EDVsC,CACxCgB,KAAMC,EAAAA,EAAAA,uBCO6B,SFVnCwD,EAAAA,GAAAA,IAAA,mDEUmC,gBAGzBG,EAHyB,EAGzBA,KAER5E,EAASgF,EAAoCJ,IALZ,gDAOjC5E,GD+BsC8E,EC/B7B,KD+BwC,CACnD9D,KAAMC,EAAAA,EAAAA,sBACNC,QAAS4D,MChCPG,EAAAA,EAAAA,IAAc,EAAD,IARoB,kCDsCI,IAACH,ICtCL,oBAAN,uDAYlBhD,EAA0B,SAACe,GAAD,0CAAW,WAAO7C,GAAP,wFAE9CW,EAKEkC,EALFlC,cACAE,EAIEgC,EAJFhC,oBACAD,EAGEiC,EAHFjC,qBACAF,EAEEmC,EAFFnC,uBACAI,EACE+B,EADF/B,sBAN8C,UASxC0D,EAAO,IAAIW,UACZC,OAAO,gBAAiBzE,GAC7B6D,EAAKY,OAAO,sBAAuBvE,GACnC2D,EAAKY,OAAO,uBAAwBxE,GACpC4D,EAAKY,OAAO,yBAA0B1E,GACtC8D,EAAKY,OAAO,wBAAyBtE,GAYrCd,EAASgF,KA1BqC,UA2BxCK,EAA4Bb,GA3BY,eA6B9Cc,EAAAA,EAAAA,IAAgB,4CAChBtF,EAAS8D,EAAqB,KA9BgB,mBA+BvC,GA/BuC,kCAiC9C9D,GDnC8C8E,ECmCrC,KDnCgD,CAC3D9D,KAAMC,EAAAA,EAAAA,+BACNC,QAAS4D,MCkCPG,EAAAA,EAAAA,IAAc,wCAlCgC,kCDFD,IAACH,ICEA,qBAAX,uDAuC1B7C,EAA0B,SAACD,GAAD,0CAAgB,WAAOhC,GAAP,8FAC7CS,EAAeuB,EAAfvB,GAAIoB,EAAWG,EAAXH,OAiBVlB,EAKEkB,EALFlB,cACAE,EAIEgB,EAJFhB,oBACAD,EAGEiB,EAHFjB,qBACAF,EAEEmB,EAFFnB,uBACAI,EACEe,EADFf,sBAtBmD,SAyBnDd,EDxFuC,CACzCgB,KAAMC,EAAAA,EAAAA,mBCyFEuD,EAAO,IAAIW,UACZC,OAAO,gBAAiBzE,GAC7B6D,EAAKY,OAAO,sBAAuBvE,GACnC2D,EAAKY,OAAO,uBAAwBxE,GACpC4D,EAAKY,OAAO,yBAA0B1E,GACtC8D,EAAKY,OAAO,wBAAyBtE,GAWrCd,EAASgF,KA3C0C,UA6C5BK,EAA4B5E,EAAI+D,GA7CJ,0BA6C3CI,KACR5E,EAAS8D,EAAqB,MAC9BwB,EAAAA,EAAAA,IAAgB,4CA/CmC,mBAgD5C,GAhD4C,kCAkDnDtF,GD7E8C8E,EC6ErC,KD7EgD,CAC3D9D,KAAMC,EAAAA,EAAAA,+BACNC,QAAS4D,MC4EPG,EAAAA,EAAAA,IAAc,uCAnDqC,kCD3BN,IAACH,IC2BK,qBAAhB,uDAuD1Bf,EAAe,SAACjF,EAAQO,GAAT,0CAA0B,WAAOW,GAAP,yFAElDA,EAASgF,KAFyC,SAG3BK,EAAiBvG,EAAQO,GAHE,gBAG1CuF,EAH0C,EAG1CA,KACR5E,EAASgF,EAAyCJ,IAJA,gDAMlD5E,EAASgF,EAAA,QACTC,EAAAA,EAAAA,IAAc,EAAD,IAPqC,yDAA1B,uDAUfV,EAAgC,qDAAM,WAAOvE,GAAP,iFAE/CA,EDzF2D,CAC7DgB,KAAMC,EAAAA,EAAAA,iBCsF2C,mBAGxC,GAHwC,wFAAN,wD,+ECtF7C,IA7CsB,SAACI,EAAMkE,GAC3B,OAAgCjC,EAAAA,EAAAA,UAAS,MAAzC,eAAOkC,EAAP,KAAiBC,EAAjB,KA0CA,OAxCA5B,EAAAA,EAAAA,YAAU,WACR,IAAM6B,EAAS,mCAAG,6HAESC,MAAMJ,GAFf,WAERK,EAFQ,QAIAC,GAJA,sBAKN,IAAIC,MAAJ,2BACgBF,EAASG,OADzB,YACmCH,EAASI,aANtC,uBAUKJ,EAASK,cAVd,OAURrB,EAVQ,OAYRsB,EAAY,IAAIC,IAAIZ,GACpBa,EAbQ,OAaOF,QAbP,IAaOA,GAbP,UAaOA,EAAWG,gBAblB,aAaO,EAAqBC,MAAM,KAG1CC,EAAO,IAAIC,KAAK,CAAC5B,IAGjB6B,EAAWL,GAAyB,OAAZA,QAAY,IAAZA,OAAA,EAAAA,EAAclG,QAAS,GAE/CwG,EArBQ,OAqBGD,QArBH,IAqBGA,OArBH,EAqBGA,EAAUH,MAAM,KAE3BK,EAAO,IAAIC,KAAK,CAACL,GAAOE,EAAU,CACtCzF,KAAK,SAAD,OAAW0F,GAAiB,OAARA,QAAQ,IAARA,OAAA,EAAAA,EAAUxG,QAAS,MAG7CuF,EAAYkB,GA3BE,kDA6BdE,QAAQ/B,MAAM,8BAAd,MA7Bc,sGAAH,qDAkCXzD,GAAQkE,GACVG,MAED,CAACrE,EAAMkE,IAEHC","sources":["Component/NoData/index.js","Pages/OrganizationSetup/OrganizationSetup.js","Pages/OrganizationSetup/CreateOrganizationSetup.js","Pages/OrganizationSetup/index.js","Redux/OrganizationSetup/api.js","Redux/OrganizationSetup/action.js","Redux/OrganizationSetup/thunk.js","utils/fetchImage.js"],"sourcesContent":["import React from \"react\";\nimport { FaPlus } from \"react-icons/fa\";\nimport Tooltip from \"../Tooltip/Tooltip\";\n\nconst index = ({ search, onClick, addPermission }) => {\n  \n  return (\n    <div className=\"card w-50 p-5 text-center justify-content-center no-data\">\n      <h4 className=\"fw-normal mb-3\">No data to Display</h4>\n      {!search && addPermission && (\n        <h6>\n          Please Add Data <br />\n          <Tooltip content=\"Add\">\n            <button\n              onClick={onClick}\n              className=\"btn btn-primary btn-md mx-2 px-3 py-1 mt-3\"\n            >\n              <FaPlus className=\"nodata-icon\" size={20} /> Add\n            </button>\n          </Tooltip>{\" \"}\n        </h6>\n      )}\n    </div>\n  );\n};\n\nexport default index;\n","import React, { useState } from \"react\";\nimport { FaEdit, FaFileSignature } from \"react-icons/fa\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { editCardRequest } from \"../../Redux/Card/thunk\";\n\nimport PaginationBlock from \"../../Component/PaginationBlock\";\nimport NoData from \"../../Component/NoData\";\nimport Tooltip from \"../../Component/Tooltip/Tooltip\";\nimport { useHistory } from \"react-router-dom\";\nimport { updateOrganizationSetup } from \"../../Redux/OrganizationSetup/thunk\";\nimport { organizationSetupConstants } from \"../../Redux/OrganizationSetup/constants\";\n\nconst OrganizationSetup = ({\n  currentPage,\n  postsPerPage,\n\n  search,\n  showModal,\n  setShowModal,\n}) => {\n  // props\n  const group = useSelector((state) => state.auth.group);\n  const isAdmin = useSelector((state) => state.auth.isAdmin);\n  const isSuperuser = useSelector((state) => state.auth.isSuperuser);\n  const { organizationSetups } = useSelector(\n    (state) => state.organizationSetup\n  );\n\n  const dispatch = useDispatch();\n\n  //pagination end\n\n  //edit function for the province\n  const handleEdit = (id) => {\n    dispatch({\n      type: organizationSetupConstants.ORGANIZATION_SETUP_EDIT,\n      payload: id,\n    });\n    setShowModal(true);\n  };\n\n  // \"recommendationRequired\": false,\n  //         \"canMinorApply\": true,\n  //         \"otherLettersRequired\": false,\n  //         \"newCardValidityYear\": 1,\n  //         \"renewCardValidityYear\": 1\n\n  return (\n    <>\n      {organizationSetups?.length > 0 ? (\n        <div className=\"mt-2\">\n          <div className=\"table-scrollable\">\n            <table className=\"table table-hover table-bordered text-center\">\n              <thead>\n                <tr>\n                  <th scope=\"col\" style={{ width: \"8%\" }}>\n                    S.N\n                  </th>\n\n                  <th scope=\"col\">Recommendation Required</th>\n                  <th scope=\"col\">Can Minor Apply</th>\n                  <th scope=\"col\">Other Letters Required</th>\n                  <th scope=\"col\">New Card Validity Year</th>\n                  <th scope=\"col\">Renew Card Validity Year</th>\n\n                  <th scope=\"col\">Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {organizationSetups?.length > 0 &&\n                  organizationSetups.map((detail, i) => {\n                    const {\n                      id,\n                      recommendationRequired,\n                      canMinorApply,\n                      otherLettersRequired,\n                      newCardValidityYear,\n                      renewCardValidityYear,\n                    } = detail;\n\n                    return (\n                      <tr key={id}>\n                        <td className=\"fw-bold\" style={{ width: \"8%\" }}>\n                          {postsPerPage * (currentPage - 1) + (i + 1)}{\" \"}\n                        </td>\n\n                        <td>{recommendationRequired ? \"Yes\" : \"No\"}</td>\n                        <td>{canMinorApply ? \"Yes\" : \"No\"}</td>\n                        <td>{otherLettersRequired ? \"Yes\" : \"No\"}</td>\n                        <td>{newCardValidityYear}</td>\n                        <td>{renewCardValidityYear}</td>\n\n                        <td>\n                          {(isAdmin || isSuperuser) && (\n                            <Tooltip content=\"Edit\">\n                              <button\n                                onClick={() => handleEdit(id)}\n                                className=\"btn btn-sm btn-edit btn-primary mx-2\"\n                              >\n                                <FaEdit />\n                              </button>\n                            </Tooltip>\n                          )}\n                        </td>\n                      </tr>\n                    );\n                  })}\n              </tbody>\n            </table>\n          </div>\n          {/* {count > 0 && (\n            <PaginationBlock\n              currentPage={currentPage}\n              postsPerPage={postsPerPage}\n              count={count}\n              paginate={paginate}\n              handleClick={handleClick}\n              setCurrentPage={setCurrentPage}\n              minPageNumberLimit={minPageNumberLimit}\n              maxPageNumberLimit={maxPageNumberLimit}\n            />\n          )} */}\n        </div>\n      ) : (\n        <NoData\n          search={search}\n          onClick={() => setShowModal(true)}\n          addPermission={isAdmin || isSuperuser}\n        />\n      )}\n    </>\n  );\n};\n\nexport default OrganizationSetup;\n","import React, { useEffect, useState } from \"react\";\nimport * as Yup from \"yup\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport TextError from \"../../Component/TextError/TextError\";\nimport Thumb from \"../../Component/Thumb\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { FAVICON_SIZE, LOGO_SIZE, SUPPORTED_FORMATS } from \"../../utils/image\";\nimport Button from \"../../Component/Button/Button\";\nimport {\n  createOrganizationSetup,\n  updateOrganizationSetup,\n} from \"../../Redux/OrganizationSetup/thunk\";\nimport { errorFunction } from \"../../Component/Alert\";\nimport useFetchImage from \"../../utils/fetchImage\";\nconst CreateOrganizationSetup = ({ setShowModal, showModal }) => {\n  const { organizationSetup, edit } = useSelector(\n    (state) => state.organizationSetup\n  );\n  // const logoImage = useFetchImage(edit, edit ? organizationSetup?.logo : \"\");\n  // const stampImage = useFetchImage(edit, edit ? organizationSetup?.stamp : \"\");\n  // const signatureImage = useFetchImage(\n  //   edit,\n  //   edit ? organizationSetup?.signature : \"\"\n  // );\n\n  // const [logo, setLogo] = useState(\n  //   edit ? (organizationSetup ? organizationSetup?.logo : null) : null\n  // );\n\n  // const [stamp, setStamp] = useState(\n  //   edit ? (organizationSetup ? organizationSetup.stamp : null) : null\n  // );\n  // const [signature, setSignature] = useState(\n  //   edit ? (organizationSetup ? organizationSetup.signature : null) : null\n  // );\n\n  // recommendationRequired\n  // boolean\n\n  // false\n  // Send empty value\n  // canMinorApply\n  // boolean\n\n  // true\n  // Send empty value\n  // otherLettersRequired\n  // boolean\n\n  // true\n  // Send empty value\n  // newCardValidityYear\n  // integer\n  // 2147483647\n  // Send empty value\n  // renewCardValidityYea\n\n  const initialValues = {\n    // name: edit ? (organizationSetup ? organizationSetup.name : \"\") : \"\",\n    // phoneNo: edit ? (organizationSetup ? organizationSetup.phoneNo : \"\") : \"\",\n    // email: edit ? (organizationSetup ? organizationSetup.email : \"\") : \"\",\n    // address: edit ? (organizationSetup ? organizationSetup.address : \"\") : \"\",\n    // fiscalSessionType: edit\n    //   ? organizationSetup\n    //     ? organizationSetup.fiscalSessionType\n    //     : \"\"\n    //   : \"\",\n    // logo: logoImage,\n    // stamp: stampImage,\n    // signature: signatureImage,\n\n    recommendationRequired: edit\n      ? organizationSetup\n        ? organizationSetup.recommendationRequired\n        : \"\"\n      : \"\",\n    canMinorApply: edit\n      ? organizationSetup\n        ? organizationSetup.canMinorApply\n        : \"\"\n      : \"\",\n    newCardValidityYear: edit\n      ? organizationSetup\n        ? organizationSetup.newCardValidityYear\n        : \"\"\n      : \"\",\n    renewCardValidityYear: edit\n      ? organizationSetup\n        ? organizationSetup.renewCardValidityYear\n        : \"\"\n      : \"\",\n  };\n\n  const validationSchema = Yup.object().shape({\n    // name: Yup.string().required(\"Required\"),\n    // address: Yup.string().required(\"Required\"),\n    // phoneNo: Yup.string().required(\"Phone Number\"),\n    // email: Yup.string().email(\"@ is required\").required(\"Required.\"),\n\n    // logo: Yup.mixed()\n    //   .test(\n    //     \"fileSize\",\n    //     \"File must be less than 20KB\",\n    //     (file) => !file || (file && file.size <= FAVICON_SIZE)\n    //   )\n    //   .test(\n    //     \"fileType\",\n    //     \"Unsupported File Format.\",\n    //     (file) => !file || (file && SUPPORTED_FORMATS.includes(file.type))\n    //   ),\n    // signature: Yup.mixed()\n    //   .test(\n    //     \"fileSize\",\n    //     \"File must be less than 20KB\",\n    //     (file) => !file || (file && file.size <= FAVICON_SIZE)\n    //   )\n    //   .test(\n    //     \"fileType\",\n    //     \"Unsupported File Format.\",\n    //     (file) => !file || (file && SUPPORTED_FORMATS.includes(file.type))\n    //   ),\n    // stamp: Yup.mixed()\n    //   .test(\n    //     \"fileSize\",\n    //     \"File must be less than 20KB.\",\n    //     (file) => !file || (file && file.size <= FAVICON_SIZE)\n    //   )\n    //   .test(\n    //     \"fileType\",\n    //     \"Unsupported File Format.\",\n    //     (file) => !file || (file && SUPPORTED_FORMATS.includes(file.type))\n    //   ),\n\n    recommendationRequired: Yup.boolean(),\n    canMinorApply: Yup.boolean(),\n    newCardValidityYear: Yup.number().min(0).max(2147483647),\n    renewCardValidityYear: Yup.number().min(0).max(2147483647),\n  });\n  const dispatch = useDispatch();\n  const onSubmit = async (values) => {\n    if (!edit) {\n      const result = await dispatch(createOrganizationSetup(values));\n\n      if (result) {\n        setShowModal(false);\n      } else {\n        setShowModal(true);\n      }\n    } else {\n      const createData = {\n        id: organizationSetup?.id,\n        values: { ...values },\n      };\n      const result = await dispatch(updateOrganizationSetup(createData));\n      if (result) {\n        setShowModal(false);\n      } else {\n        setShowModal(true);\n      }\n    }\n  };\n\n  // const handleFileChange = (event, setFieldValue) => {\n  //   const file = event.target.files[0];\n  //   const acceptedExtensions = [\"jpeg\", \"jpg\", \"png\"];\n\n  //   if (file) {\n  //     const extension = file.name.split(\".\").pop().toLowerCase();\n  //     if (!acceptedExtensions.includes(extension)) {\n  //       errorFunction(\n  //         `File extension of \"jpeg\", \"jpg\", \"png\" are only accepted`\n  //       );\n  //       return;\n  //     } else {\n  // if (event.target.name === \"logo\") {\n  //   setFieldValue(\"logo\", event.target.files[0]);\n  //   let reader = new FileReader();\n  //   reader.readAsDataURL(event.target.files[0]);\n  //   reader.onloadend = () => setLogo([reader.result]);\n  // } else if (event.target.name === \"stamp\") {\n  //   setFieldValue(\"stamp\", event.target.files[0]);\n  //   let reader = new FileReader();\n  //   reader.readAsDataURL(event.target.files[0]);\n  //   reader.onloadend = () => setStamp([reader.result]);\n  // } else if (event.target.name === \"signature\") {\n  //   setFieldValue(\"signature\", event.target.files[0]);\n  //   let reader = new FileReader();\n  //   reader.readAsDataURL(event.target.files[0]);\n  //   reader.onloadend = () => setSignature([reader.result]);\n  // }\n  // }\n  // }\n\n  // onChange(event);\n  // };\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-12\">\n        <Formik\n          initialValues={initialValues}\n          validationSchema={validationSchema}\n          onSubmit={onSubmit}\n        >\n          {(formik) => {\n            const { setFieldValue } = formik;\n            return (\n              <Form autoComplete=\"off\">\n                <div className=\"my-2\">\n                  <div className=\"row\">\n                    <div className=\"col-6 mb-3\">\n                      <label htmlFor=\"name\" className=\"fw-bold float-start\">\n                        Recommendation Required\n                        <strong className=\"text-danger \">*</strong>\n                      </label>\n                      <input\n                        type=\"checkbox\"\n                        name=\"recommendationRequired\"\n                        className=\"form-check-input ml-3\"\n                        checked={formik.values.recommendationRequired}\n                        onChange={(e) => {\n                          setFieldValue(\n                            \"recommendationRequired\",\n                            e.target.checked\n                          );\n                        }}\n                      />\n                      <ErrorMessage\n                        name=\"recommendationRequired\"\n                        component={TextError}\n                      />\n                    </div>\n\n                    <div className=\"col-6 mb-3\">\n                      <label\n                        htmlFor=\"canMinorApply\"\n                        className=\"fw-bold float-start\"\n                      >\n                        Can Minor Apply\n                        <strong className=\"text-danger \">*</strong>\n                      </label>\n                      <input\n                        type=\"checkbox\"\n                        name=\"canMinorApply\"\n                        className=\"form-check-input ml-3\"\n                        checked={formik.values.canMinorApply}\n                        onChange={(e) => {\n                          setFieldValue(\"canMinorApply\", e.target.checked);\n                        }}\n                      />\n                      <ErrorMessage\n                        name=\"canMinorApply\"\n                        component={TextError}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"col-6\">\n                      <label\n                        htmlFor=\"newCardValidityYear\"\n                        className=\"fw-bold float-start\"\n                      >\n                        New Card Validity Year\n                        <strong className=\"text-danger \">*</strong>\n                      </label>\n                      <Field\n                        type=\"number\"\n                        value={formik.values.newCardValidityYear}\n                        name=\"newCardValidityYear\"\n                        onChange={(e) => {\n                          setFieldValue(\"newCardValidityYear\", e.target.value);\n                        }}\n                        className=\"form-control \"\n                      />\n                      <ErrorMessage\n                        name=\"newCardValidityYear\"\n                        component={TextError}\n                      />\n                    </div>\n                    <div className=\"col-6\">\n                      <label\n                        htmlFor=\"renewCardValidityYear\"\n                        className=\"fw-bold float-start\"\n                      >\n                        Renew Card Validity Year\n                        <strong className=\"text-danger \">*</strong>\n                      </label>\n                      <Field\n                        type=\"number\"\n                        value={formik.values.renewCardValidityYear}\n                        name=\"renewCardValidityYear\"\n                        onChange={(e) => {\n                          setFieldValue(\n                            \"renewCardValidityYear\",\n                            e.target.value\n                          );\n                        }}\n                        className=\"form-control \"\n                      />\n                      <ErrorMessage\n                        name=\"renewCardValidityYear\"\n                        component={TextError}\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"my-4 d-flex justify-content-end align-items-center\">\n                  <Button\n                    type=\"submit\"\n                    className={\"btn btn-primary\"}\n                    createButton={true}\n                    title={edit ? \"Update\" : \"Save\"}\n                    content={edit ? \"Update\" : \"Save\"}\n                  />\n                </div>\n              </Form>\n            );\n          }}\n        </Formik>\n      </div>\n    </div>\n  );\n};\n\nexport default CreateOrganizationSetup;\n","import React, { useState, useEffect } from \"react\";\nimport { defaultLimit } from \"../../utils/defaultLimit\";\nimport {\n  getOrganizationSetup,\n  handleSearch,\n  organizationSetupClearAllData,\n} from \"../../Redux/OrganizationSetup/thunk\";\nimport ListingSkeleton from \"../../Component/Skeleton/ListingSkeleton\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { FaPlus } from \"react-icons/fa\";\nimport Tooltip from \"../../Component/Tooltip/Tooltip\";\nimport { useHistory } from \"react-router-dom\";\n\nimport OrganizationSetup from \"./OrganizationSetup\";\nimport CreateOrganizationSetup from \"./CreateOrganizationSetup\";\nimport Modal from \"../../Component/Modal\";\nconst OrganizationSetupListing = () => {\n  const history = useHistory();\n  const count = useSelector((state) => state.organizationSetup.count);\n  const loading = useSelector((state) => state.organizationSetup.loading);\n  const loadingUpdate = useSelector(\n    (state) => state.organizationSetup.loadingUpdate\n  );\n  const organizationSetup = useSelector(\n    (state) => state.organizationSetup.organizationSetup\n  );\n  const edit = useSelector((state) => state.organizationSetup.edit);\n  const search = useSelector((state) => state.search.search);\n  const dispatch = useDispatch();\n\n  // for pagination\n  const [currentPage, setCurrentPage] = useState(1);\n  const [maxPageNumberLimit, setMaxPageNumberLimit] = useState(5);\n  const [minPageNumberLimit, setMinPageNumberLimit] = useState(0);\n  const [postsPerPage, setPostsPerPage] = useState(10);\n  const [showModal, setShowModal] = useState(false);\n  //pagination end\n  //loading all the food\n  useEffect(() => {\n    if (postsPerPage === 0) {\n      if (search === \"\") {\n        dispatch(getOrganizationSetup(count));\n      } else {\n        dispatch(handleSearch(search, count));\n      }\n    } else {\n      if (search === \"\") {\n        if (postsPerPage === defaultLimit) {\n          dispatch(getOrganizationSetup(postsPerPage));\n        } else {\n          setCurrentPage(1);\n          dispatch(getOrganizationSetup(postsPerPage));\n        }\n      } else {\n        setCurrentPage(1);\n        setMaxPageNumberLimit(5);\n        setMinPageNumberLimit(0);\n        dispatch(handleSearch(search, postsPerPage));\n      }\n    }\n  }, [dispatch, postsPerPage, search]);\n  return (\n    <>\n      <div className=\"\">\n        <div className=\"header-content\">\n          <h4 className=\"mb-sm-0 fw-normal\">Organization Rule</h4>\n        </div>\n        <div\n          className={`${\n            organizationSetup?.length > 0 ? \"office-card-body\" : \"\"\n          }`}\n        >\n          <div className=\"row m-0 p-0\">\n            {organizationSetup?.length > 0 && (\n              <>\n                <div className=\"col-6 text-right\">\n                  <Tooltip content=\"Add\">\n                    <button\n                      className=\"btn btn-primary waves-effect waves-light btn-sm float-end\"\n                      onClick={() => history.push(\"/create-entry-exit-pass\")}\n                    >\n                      <FaPlus className=\"mb-1\" />\n                      &nbsp;Add\n                    </button>\n                  </Tooltip>\n                </div>\n              </>\n            )}\n          </div>\n          {loading && <ListingSkeleton />}\n          {loadingUpdate && <ListingSkeleton />}\n          {!loading && (\n            <OrganizationSetup\n              currentPage={currentPage}\n              setCurrentPage={setCurrentPage}\n              postsPerPage={postsPerPage}\n              setPostsPerPage={setPostsPerPage}\n              count={count}\n              maxPageNumberLimit={maxPageNumberLimit}\n              setMaxPageNumberLimit={setMaxPageNumberLimit}\n              minPageNumberLimit={minPageNumberLimit}\n              setMinPageNumberLimit={setMinPageNumberLimit}\n              search={search}\n              showModal={showModal}\n              setShowModal={setShowModal}\n            />\n          )}\n\n          {showModal && (\n            <Modal\n              header={\"Set Organization Rule\"}\n              types={\"setup\"}\n              size={\"modal-lg\"}\n              setShowModal={setShowModal}\n              showModal={showModal}\n              edit={edit}\n              clearAction={organizationSetupClearAllData}\n            >\n              <CreateOrganizationSetup\n                setShowModal={setShowModal}\n                showModal={showModal}\n                edit={edit}\n              />\n            </Modal>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default OrganizationSetupListing;\n","import axiosInstance from \"../../utils/axios\";\n\n//obtaining the paginated data\nexport const getOrganizationSetup = () =>\n  axiosInstance.get(`api/v1/core-app/org-rule?offset=0&limit=0&ordering=-id`);\n\nexport const getOrganization = () =>\n  axiosInstance.get(`api/v1/core-app/organization-setup/list?limit=0`);\n//creating function\nexport const createOrganizationSetup = (body) =>\n  axiosInstance.post(`api/v1/core-app/org-rule`, body);\n\n//update function\nexport const updateOrganizationSetup = (id, body) =>\n  axiosInstance.patch(`api/v1/core-app/org-rule/${id}`, body);\n\n//searching function\nexport const handleSearch = (search, postsPerPage) =>\n  axiosInstance.get(\n    `api/v1/core-app/org-rule?offset=0&limit=${postsPerPage}&search=${search}`\n  );\n","import { organizationSetupConstants } from \"./constants\";\n// actions\nexport const loadingAction = () => ({\n  type: organizationSetupConstants.LOADING_ORGANIZATION_SETUP,\n});\nexport const loadingUpdatedAction = () => ({\n  type: organizationSetupConstants.LOADING_UPDATED,\n});\n\nexport const loadingOrganization = () => ({\n  type: organizationSetupConstants.LOADING_ORGANIZATION,\n});\nexport const getOrganizationSetupSuccessAction = (data) => ({\n  type: organizationSetupConstants.GET_ORGANIZATION_SETUP_SUCCESS,\n  payload: data,\n});\n\nexport const getOrganizationSetupFailAction = (error) => ({\n  type: organizationSetupConstants.GET_ORGANIZATION_SETUP_FAIL,\n  payload: error,\n});\n\nexport const createOrganizationSetupSuccessAction = (data) => ({\n  type: organizationSetupConstants.CREATE_ORGANIZATION_SETUP_SUCCESS,\n  payload: data,\n});\n\nexport const createOrganizationSetupFailAction = (error) => ({\n  type: organizationSetupConstants.CREATE_ORGANIZATION_SETUP_FAIL,\n  payload: error,\n});\n\nexport const organizationSetupEditAction = (data) => ({\n  type: organizationSetupConstants.ORGANIZATION_SETUP_EDIT,\n  payload: data,\n});\nexport const organizationSetupUpdateSuccessAction = (data) => ({\n  type: organizationSetupConstants.UPDATE_ORGANIZATION_SETUP_SUCCESS,\n  payload: data,\n});\n\nexport const organizationSetupUpdateFailAction = (error) => ({\n  type: organizationSetupConstants.UPDATE_ORGANIZATION_SETUP_FAIL,\n  payload: error,\n});\n\nexport const organizationSetupClearAllDataAction = (error) => ({\n  type: organizationSetupConstants.CLEAR_ALL_DATA,\n});\n\nexport const getOrganizationSuccessAction = (data) => ({\n  type: organizationSetupConstants.GET_ORGANIZATION_SUCCESS,\n  payload: data,\n});\n\nexport const getOrganizationFailAction = (error) => ({\n  type: organizationSetupConstants.GET_ORGANIZATION_FAIL,\n  payload: error,\n});\n","import * as API from \"./api\";\nimport * as action from \"./action\";\nimport { errorFunction, successFunction } from \"../../Component/Alert\";\n\n//get  Bank\nexport const getOrganizationSetup = () => async (dispatch) => {\n  try {\n    dispatch(action.loadingAction());\n    const { data } = await API.getOrganizationSetup();\n\n    dispatch(action.getOrganizationSetupSuccessAction(data));\n  } catch (error) {\n    dispatch(action.getOrganizationSetupFailAction(error));\n    errorFunction(error);\n  }\n};\n//get  Bank\nexport const getOrganization = () => async (dispatch) => {\n  try {\n    dispatch(action.loadingOrganization());\n    const { data } = await API.getOrganization();\n    \n    dispatch(action.getOrganizationSuccessAction(data));\n  } catch (error) {\n    dispatch(action.getOrganizationFailAction(error));\n    errorFunction(error);\n  }\n};\n\nexport const createOrganizationSetup = (value) => async (dispatch) => {\n  const {\n    canMinorApply,\n    newCardValidityYear,\n    otherLettersRequired,\n    recommendationRequired,\n    renewCardValidityYear,\n  } = value;\n  try {\n    const body = new FormData();\n    body.append(\"canMinorApply\", canMinorApply);\n    body.append(\"newCardValidityYear\", newCardValidityYear);\n    body.append(\"otherLettersRequired\", otherLettersRequired);\n    body.append(\"recommendationRequired\", recommendationRequired);\n    body.append(\"renewCardValidityYear\", renewCardValidityYear);\n\n    // if (stamp) {\n    //   body.append(\"stamp\", stamp);\n    // }\n    // if (logo) {\n    //   body.append(\"logo\", logo);\n    // }\n    // if (signature) {\n    //   body.append(\"signature\", signature);\n    // }\n\n    dispatch(action.loadingAction());\n    await API.createOrganizationSetup(body);\n\n    successFunction(\"Organization Setup created successfully \");\n    dispatch(getOrganizationSetup(10));\n    return true;\n  } catch (error) {\n    dispatch(action.createOrganizationSetupFailAction(error));\n    errorFunction(\"Failed to create Organization Setup.\");\n  }\n};\n\n//update\nexport const updateOrganizationSetup = (createData) => async (dispatch) => {\n  const { id, values } = createData;\n  //   canMinorApply\n  // :\n  // true\n  // newCardValidityYear\n  // :\n  // \"3\"\n  // otherLettersRequired\n  // :\n  // true\n  // recommendationRequired\n  // :\n  // true\n  // renewCardValidityYear\n  // :\n  // \"3\n  const {\n    canMinorApply,\n    newCardValidityYear,\n    otherLettersRequired,\n    recommendationRequired,\n    renewCardValidityYear,\n  } = values;\n  try {\n    dispatch(action.loadingUpdatedAction());\n\n    const body = new FormData();\n    body.append(\"canMinorApply\", canMinorApply);\n    body.append(\"newCardValidityYear\", newCardValidityYear);\n    body.append(\"otherLettersRequired\", otherLettersRequired);\n    body.append(\"recommendationRequired\", recommendationRequired);\n    body.append(\"renewCardValidityYear\", renewCardValidityYear);\n    // if (stamp) {\n    //   body.append(\"stamp\", stamp);\n    // }\n    // if (logo) {\n    //   body.append(\"logo\", logo);\n    // }\n    // if (signature) {\n    //   body.append(\"signature\", signature);\n    // }\n\n    dispatch(action.loadingAction());\n\n    const { data } = await API.updateOrganizationSetup(id, body);\n    dispatch(getOrganizationSetup(10));\n    successFunction(\"Organization Setup Updated Successfully \");\n    return true;\n  } catch (error) {\n    dispatch(action.organizationSetupUpdateFailAction(error));\n    errorFunction(\"Failed to Update Organization Setup\");\n  }\n};\n//handle Search\nexport const handleSearch = (search, postsPerPage) => async (dispatch) => {\n  try {\n    dispatch(action.loadingAction());\n    const { data } = await API.handleSearch(search, postsPerPage);\n    dispatch(action.getOrganizationSetupSuccessAction(data));\n  } catch (error) {\n    dispatch(action.getOrganizationSetupFailAction(error));\n    errorFunction(error);\n  }\n};\nexport const organizationSetupClearAllData = () => async (dispatch) => {\n  try {\n    dispatch(action.organizationSetupClearAllDataAction());\n    return true;\n  } catch (error) {}\n};\n","import { useEffect, useState } from \"react\";\n\nconst useFetchImage = (edit, imageUrl) => {\n  const [fileData, setFileData] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(imageUrl);\n\n        if (!response.ok) {\n          throw new Error(\n            `Failed to fetch: ${response.status} ${response.statusText}`\n          );\n        }\n\n        const data = await response.arrayBuffer();\n\n        const urlObject = new URL(imageUrl);\n        const pathSegments = urlObject?.pathname?.split(\"/\");\n\n        // Create a Blob with the binary data\n        const blob = new Blob([data]);\n\n        // Create a File using the Blob and set it in the state\n        const fileName = pathSegments[pathSegments?.length - 1]; // Replace with the desired file name\n\n        const filtType = fileName?.split(\".\");\n\n        const file = new File([blob], fileName, {\n          type: `image/${filtType[filtType?.length - 1]}`,\n        });\n\n        setFileData(file);\n      } catch (error) {\n        console.error(\"Error fetching binary data:\", error);\n      } finally {\n      }\n    };\n\n    if (edit && imageUrl) {\n      fetchData();\n    }\n  }, [edit, imageUrl]);\n\n  return fileData;\n};\nexport default useFetchImage;\n"],"names":["search","onClick","addPermission","className","content","size","currentPage","postsPerPage","setShowModal","showModal","isAdmin","useSelector","state","auth","group","isSuperuser","organizationSetups","organizationSetup","dispatch","useDispatch","length","scope","style","width","map","detail","i","id","recommendationRequired","canMinorApply","otherLettersRequired","newCardValidityYear","renewCardValidityYear","Tooltip","type","organizationSetupConstants","payload","handleEdit","NoData","edit","initialValues","validationSchema","Yup","shape","min","max","onSubmit","values","createOrganizationSetup","result","createData","updateOrganizationSetup","formik","setFieldValue","autoComplete","htmlFor","name","checked","onChange","e","target","component","TextError","value","Button","createButton","title","history","useHistory","count","loading","loadingUpdate","useState","setCurrentPage","maxPageNumberLimit","setMaxPageNumberLimit","minPageNumberLimit","setMinPageNumberLimit","setPostsPerPage","useEffect","getOrganizationSetup","handleSearch","defaultLimit","push","ListingSkeleton","Modal","header","types","clearAction","organizationSetupClearAllData","body","axiosInstance","loadingAction","getOrganizationSetupSuccessAction","data","getOrganizationSetupFailAction","error","getOrganizationSuccessAction","action","errorFunction","getOrganization","FormData","append","API","successFunction","imageUrl","fileData","setFileData","fetchData","fetch","response","ok","Error","status","statusText","arrayBuffer","urlObject","URL","pathSegments","pathname","split","blob","Blob","fileName","filtType","file","File","console"],"sourceRoot":""}