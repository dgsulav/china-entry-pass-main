{"version":3,"file":"static/js/2491.355e5472.chunk.js","mappings":"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","sources":["Pages/Report/NewCardReportComponent.js","Pages/Report/NewCardReport.js"],"sourcesContent":["import { bsToAd } from \"@sbmdkl/nepali-date-converter\";\nimport Calendar from \"@sbmdkl/nepali-datepicker-reactjs\";\nimport { ErrorMessage, Field, Form, Formik } from \"formik\";\nimport React, { useState } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AsyncPaginate } from \"react-select-async-paginate\";\nimport * as Yup from \"yup\";\nimport Button from \"../../Component/Button/Button\";\nimport TextError from \"../../Component/TextError/TextError\";\nimport { reportConstants } from \"../../Redux/Report/constants\";\nimport {\n  getAllNewCardReport,\n  getNewCardReport,\n} from \"../../Redux/Report/thunk\";\nimport { dateFormater } from \"../../utils/dateFormater\";\nimport { statusTypes } from \"../../Component/Data/Data\";\nimport Select from \"react-select\";\nimport { loadOptionsOffice } from \"./asyncFunction\";\n\nconst NewCardReportComponent = ({\n  name,\n  setShowExcelReportModal,\n  setShowPDFReportModal,\n  setShowReportModal,\n  reportStartDate,\n  setReportStartDate,\n  reportEndDate,\n  setReportEndDate,\n  setFormData,\n}) => {\n  const dispatch = useDispatch();\n  const [paginatedData, setPaginatedData] = useState(true);\n  const userOffice = useSelector((state) => state.auth.office);\n  const postsPerPage = 10;\n\n  const initialState = {\n    office: userOffice !== null ? userOffice : null,\n    status: null,\n    adSystem: true,\n    bsSystem: false,\n    startDate: new Date().toLocaleDateString(\"fr-CA\"),\n    endDate: new Date().toLocaleDateString(\"fr-CA\"),\n    quickReport: true,\n    pdfReport: false,\n    excelReport: false,\n    district: null,\n  };\n  const validationSchema = Yup.object().shape({\n    adSystem: Yup.bool(),\n    bsSystem: Yup.bool(),\n    startDate: Yup.string()\n      .test(\n        \"startDate\",\n        \"Start Date cannot be greater than today's date\",\n        function (value) {\n          const { adSystem } = this.parent;\n          const adDate =\n            value !== undefined\n              ? value.length === 10 && adSystem === false\n                ? bsToAd(value)\n                : value\n              : \"\";\n          if (adSystem && value !== undefined && new Date(value) > new Date()) {\n            return false;\n          } else if (\n            adSystem === false &&\n            value !== undefined &&\n            new Date(adDate) > new Date()\n          ) {\n            return false;\n          } else {\n            return true;\n          }\n        }\n      )\n      .test(\n        \"startDate\",\n        \"Start Date cannot be greater than end Date\",\n        function (value) {\n          const { adSystem, endDate } = this.parent;\n          const adDate =\n            value !== undefined\n              ? value.length === 10 && adSystem === false\n                ? bsToAd(value)\n                : value\n              : \"\";\n          if (\n            adSystem &&\n            value !== undefined &&\n            new Date(value) > new Date(endDate)\n          ) {\n            return false;\n          } else if (\n            adSystem === false &&\n            value !== undefined &&\n            new Date(adDate) > new Date(endDate)\n          ) {\n            return false;\n          } else {\n            return true;\n          }\n        }\n      ),\n    endDate: Yup.string()\n      .test(\n        \"endDate\",\n        \"End Date cannot be greater than today's date\",\n        function (value) {\n          const { adSystem } = this.parent;\n          const adDate =\n            value !== undefined\n              ? value.length === 10 && adSystem === false\n                ? bsToAd(value)\n                : value\n              : \"\";\n          if (adSystem && value !== undefined && new Date(value) > new Date()) {\n            return false;\n          } else if (\n            adSystem === false &&\n            value !== undefined &&\n            new Date(adDate) > new Date()\n          ) {\n            return false;\n          } else {\n            return true;\n          }\n        }\n      )\n      .test(\n        \"endDate\",\n        \"End Date cannot be less than start Date\",\n        function (value) {\n          const { adSystem, startDate } = this.parent;\n\n          const convertedStartDate =\n            startDate.length === 10 && adSystem === false\n              ? bsToAd(startDate)\n              : startDate;\n          const adDate =\n            value !== undefined\n              ? value.length === 10 && adSystem === false\n                ? bsToAd(value)\n                : value\n              : \"\";\n          if (\n            adSystem &&\n            value !== undefined &&\n            new Date(value) < new Date(convertedStartDate)\n          ) {\n            return false;\n          } else if (\n            adSystem === false &&\n            value !== undefined &&\n            new Date(adDate) < new Date(convertedStartDate)\n          ) {\n            return false;\n          } else {\n            return true;\n          }\n        }\n      ),\n    office: Yup.object().nullable(true),\n    status: Yup.object().nullable(true),\n    quickReport: Yup.bool(),\n    pdfReport: Yup.bool(),\n    excelReport: Yup.bool(),\n  });\n  const onSubmit = async (values) => {\n    const {\n      startDate,\n      endDate,\n      adSystem,\n      quickReport,\n      pdfReport,\n      office,\n      status,\n    } = values;\n    const formatedStartDate = adSystem\n      ? dateFormater(new Date(startDate))\n      : reportStartDate;\n    const formatedEndDate = adSystem\n      ? dateFormater(new Date(endDate))\n      : reportEndDate;\n    const body = {\n      formatedStartDate,\n      formatedEndDate,\n      office: office?.id ? office?.id : \"\",\n      status: status?.id ? status?.id : \"\",\n    };\n    setFormData(body);\n    dispatch({ type: reportConstants.CLEAR_ALL_DATA });\n    if (quickReport) {\n      if (paginatedData) {\n        if (name === \"report\") {\n          dispatch(getNewCardReport(postsPerPage, body));\n          setShowReportModal(true);\n          setShowExcelReportModal(false);\n          setShowPDFReportModal(false);\n        }\n      } else {\n        if (name === \"report\") {\n          dispatch(getAllNewCardReport(body));\n          setShowReportModal(true);\n          setShowExcelReportModal(false);\n          setShowPDFReportModal(false);\n        }\n      }\n    } else if (pdfReport) {\n      if (name === \"report\") {\n        dispatch(getAllNewCardReport(body));\n        setShowPDFReportModal(true);\n        setShowReportModal(false);\n        setShowExcelReportModal(false);\n      }\n    } else {\n      if (name === \"report\") {\n        dispatch(getAllNewCardReport(body));\n        setShowExcelReportModal(true);\n        setShowPDFReportModal(false);\n        setShowReportModal(false);\n      }\n    }\n  };\n\n  return (\n    <>\n      <div className=\"row justify-content-center\">\n        <div\n          className=\"col-md-7 \"\n          style={{ paddingBottom: \"10\", marginBottom: \"10%\" }}\n        >\n          <div className=\"card mb-5 mt-3 bg-white rounded\">\n            <div\n              className=\"\"\n              style={{ backgroundColor: \"#f1f1f1\", padding: \"20px\" }}\n            >\n              <Formik\n                enableReinitialize={true}\n                initialValues={initialState}\n                validationSchema={validationSchema}\n                onSubmit={onSubmit}\n              >\n                {(formik) => {\n                  return (\n                    <Form autoComplete=\"off\">\n                      <div className=\"form-group row justify-content-center\">\n                        <div className=\"col-5\">\n                          <label htmlFor=\"office\" className=\"fw-bold\">\n                            Office\n                          </label>\n\n                          <AsyncPaginate\n                            blurInputOnSelect\n                            value={formik.values.office}\n                            isClearable=\"true\"\n                            isSearchable=\"true\"\n                            name=\"office\"\n                            inputId=\"input\"\n                            getOptionLabel={(option) => `${option.name}`}\n                            getOptionValue={(option) => `${option?.id}`}\n                            onChange={(selected) => {\n                              formik.setFieldValue(\"office\", selected);\n                            }}\n                            isDisabled={userOffice === null ? false : true}\n                            loadOptions={loadOptionsOffice}\n                            additional={{\n                              offset: 0,\n                              limit: 10,\n                            }}\n                          />\n\n                          <ErrorMessage name=\"office\" component={TextError} />\n                        </div>\n                        <div className=\"col-5\">\n                          <label htmlFor=\"status\" className=\"fw-bold\">\n                            Type\n                          </label>\n                          <Select\n                            value={formik.values.status}\n                            isClearable=\"true\"\n                            isSearchable=\"true\"\n                            name=\"status\"\n                            getOptionLabel={(option) => `${option?.name} `}\n                            getOptionValue={(option) => `${option?.id}`}\n                            options={statusTypes}\n                            onChange={(selected) => {\n                              formik.setFieldValue(\"status\", selected);\n                            }}\n                          />\n\n                          <ErrorMessage name=\"status\" component={TextError} />\n                        </div>\n                      </div>\n\n                      <div className=\"form-group row mb-5 justify-content-center\">\n                        <div className=\"col-5 text-center m-3\">\n                          <Field\n                            type=\"checkbox\"\n                            name=\"adSystem\"\n                            id=\"adSystem\"\n                            className=\"filled-in chk-col-blue \"\n                            onChange={(e) => {\n                              formik.setFieldValue(\n                                \"startDate\",\n                                new Date().toLocaleDateString(\"fr-CA\")\n                              );\n                              formik.setFieldValue(\n                                \"endDate\",\n                                new Date().toLocaleDateString(\"fr-CA\")\n                              );\n                              formik.setFieldValue(\n                                \"adSystem\",\n                                e.target.checked\n                              );\n                              formik.setFieldValue(\"bsSystem\", false);\n                            }}\n                          />\n                          <label htmlFor=\"adSystem\" className=\"ml-2 fw-bold\">\n                            A.D System\n                          </label>\n                        </div>\n                        <div className=\"col-5 text-center m-3\">\n                          <Field\n                            type=\"checkbox\"\n                            name=\"bsSystem\"\n                            id=\"bsSystem\"\n                            className=\"filled-in chk-col-blue \"\n                            onChange={(e) => {\n                              formik.setFieldValue(\n                                \"bsSystem\",\n                                e.target.checked\n                              );\n                              formik.setFieldValue(\"adSystem\", false);\n                            }}\n                          />\n                          <label htmlFor=\"bsSystem\" className=\"mx-2 fw-bold\">\n                            {\" \"}\n                            B.S System\n                          </label>\n                        </div>\n                        <div className=\"col-5\">\n                          <label htmlFor=\"from_date\" className=\"fw-bold\">\n                            Start Date\n                          </label>\n                          {formik.values.bsSystem ? (\n                            <Calendar\n                              value={formik.values.startDate}\n                              onChange={({ bsDate, adDate }) => {\n                                formik.setFieldValue(\"startDate\", bsDate);\n                                setReportStartDate(adDate);\n                              }}\n                              className=\"form-control\"\n                              label=\"Start Date\"\n                              name=\"startDate\"\n                              language=\"en\"\n                              dateFormat=\"YYYY-MM-DD\"\n                              style={{ backgroundColor: \"white !important\" }}\n                            />\n                          ) : (\n                            <DatePicker\n                              value={formik.values.startDate}\n                              format=\"yyyy-MM-dd\"\n                              label=\"Start Date\"\n                              name=\"startDate\"\n                              className=\"form-control\"\n                              style={{ backgroundColor: \"white !important\" }}\n                              onChange={(value) => {\n                                formik.setFieldValue(\n                                  \"startDate\",\n                                  value?.toLocaleDateString(\"fr-CA\")\n                                );\n                                setReportStartDate(value);\n                              }}\n                            />\n                          )}\n                          <ErrorMessage\n                            component={TextError}\n                            name=\"startDate\"\n                          />\n                        </div>\n                        <div className=\"col-5\">\n                          <label htmlFor=\"endDate\" className=\"fw-bold\">\n                            End Date\n                          </label>\n                          {formik.values.bsSystem ? (\n                            <Calendar\n                              value={formik.values.endDate}\n                              onChange={({ bsDate, adDate }) => {\n                                formik.setFieldValue(\"endDate\", bsDate);\n                                setReportEndDate(adDate);\n                              }}\n                              className=\"form-control\"\n                              label=\"End Date\"\n                              name=\"endDate\"\n                              language=\"en\"\n                              dateFormat=\"YYYY-MM-DD\"\n                            />\n                          ) : (\n                            <DatePicker\n                              value={formik.values.endDate}\n                              format=\"yyyy-MM-dd\"\n                              label=\"End Date\"\n                              name=\"endDate\"\n                              className=\"form-control\"\n                              onChange={(value) => {\n                                formik.setFieldValue(\n                                  \"endDate\",\n                                  value?.toLocaleDateString(\"fr-CA\")\n                                );\n                                setReportEndDate(value);\n                              }}\n                            />\n                          )}\n                          <ErrorMessage component={TextError} name=\"endDate\" />\n                        </div>\n                        <div className=\"col-3 m-3 text-center\">\n                          <Field\n                            type=\"checkbox\"\n                            name=\"quickReport\"\n                            id=\"quickReport\"\n                            className=\"filled-in chk-col-blue \"\n                            onChange={(e) => {\n                              formik.setFieldValue(\n                                \"quickReport\",\n                                e.target.checked\n                              );\n                              formik.setFieldValue(\"pdfReport\", false);\n                              formik.setFieldValue(\"excelReport\", false);\n                            }}\n                          />\n                          <label htmlFor=\"quickReport\" className=\"mx-2 fw-bold\">\n                            {\" \"}\n                            Quick Report\n                          </label>\n                        </div>\n\n                        <div className=\"col-3 m-3 text-center\">\n                          <Field\n                            type=\"checkbox\"\n                            name=\"pdfReport\"\n                            id=\"pdfReport\"\n                            className=\"filled-in chk-col-blue \"\n                            onChange={(e) => {\n                              formik.setFieldValue(\n                                \"pdfReport\",\n                                e.target.checked\n                              );\n                              formik.setFieldValue(\"quickReport\", false);\n                              formik.setFieldValue(\"excelReport\", false);\n                            }}\n                          />\n                          <label htmlFor=\"pdfReport\" className=\"mx-2 fw-bold\">\n                            {\" \"}\n                            PDF\n                          </label>\n                        </div>\n                        {/* <div className=\"col-3 m-3 text-center\">\n                          <Field\n                            type=\"checkbox\"\n                            name=\"excelReport\"\n                            id=\"excelReport\"\n                            className=\"filled-in chk-col-blue \"\n                            onChange={(e) => {\n                              formik.setFieldValue(\n                                \"excelReport\",\n                                e.target.checked\n                              );\n                              formik.setFieldValue(\"pdfReport\", false);\n                              formik.setFieldValue(\"quickReport\", false);\n                            }}\n                          />\n                          <label htmlFor=\"excelReport\" className=\"mx-2 fw-bold\">\n                            {\" \"}\n                            Excel\n                          </label>\n                        </div> */}\n                      </div>\n                      <div className=\"form-group d-flex justify-content-center mt-3 \">\n                        <Button\n                          type={\"submit\"}\n                          className={\"btn btn-primary\"}\n                          title={\"Generate\"}\n                          content={\"Generate\"}\n                        />\n                      </div>\n                    </Form>\n                  );\n                }}\n              </Formik>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default React.memo(NewCardReportComponent);\n","import React, { lazy, Suspense, useEffect, useState } from \"react\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport NewCardReportComponent from \"./NewCardReportComponent\";\nimport { getOrganization } from \"../../Redux/OrganizationSetup/thunk\";\n\nconst ReportModal = lazy(() =>\n  import(\"../../Component/ReportModal/NewCard/ReportModal\")\n);\nconst PDFReportModal = lazy(() =>\n  import(\"../../Component/ReportModal/NewCard/PDFReportModal\")\n);\nconst ExcelReportModal = lazy(() =>\n  import(\"../../Component/ReportModal/NewCard/ExcelReportModal\")\n);\n\nconst NewCardReportListing = () => {\n  const dispatch = useDispatch();\n  // props\n\n  const cards = useSelector((state) => state.report.cards);\n  const [reportStartDate, setReportStartDate] = useState(new Date());\n  const [reportEndDate, setReportEndDate] = useState(new Date());\n  const [formData, setFormData] = useState(null);\n  // purchase order report component state\n  const [showReportModal, setShowReportModal] = useState(false);\n  const [showPDFReportModal, setShowPDFReportModal] = useState(false);\n  const [showExcelReportModal, setShowExcelReportModal] = useState(false);\n\n  useEffect(() => {\n    dispatch(getOrganization());\n  }, []);\n\n  return (\n    <>\n      <NewCardReportComponent\n        name=\"report\"\n        setShowExcelReportModal={setShowExcelReportModal}\n        setShowPDFReportModal={setShowPDFReportModal}\n        setShowReportModal={setShowReportModal}\n        reportStartDate={reportStartDate}\n        setReportStartDate={setReportStartDate}\n        reportEndDate={reportEndDate}\n        setReportEndDate={setReportEndDate}\n        setFormData={setFormData}\n      />\n\n      {/* purchase order quick summary report */}\n      <Suspense fallback={<div>Loading...</div>}>\n        {showReportModal && cards?.length > 0 && (\n          <ReportModal\n            showReportModal={showReportModal}\n            setShowReportModal={setShowReportModal}\n            formData={formData}\n            cards={cards}\n          />\n        )}\n      </Suspense>\n\n      <Suspense fallback={<div>Loading...</div>}>\n        {showPDFReportModal && cards?.length > 0 && (\n          <PDFReportModal\n            showPDFReportModal={showPDFReportModal}\n            setShowPDFReportModal={setShowPDFReportModal}\n            formData={formData}\n            cards={cards}\n          />\n        )}\n      </Suspense>\n      <Suspense fallback={<div>Loading...</div>}>\n        {showExcelReportModal && cards?.length > 0 && (\n          <ExcelReportModal\n            showExcelReportModal={showExcelReportModal}\n            setShowExcelReportModal={setShowExcelReportModal}\n            formData={formData}\n            cards={cards}\n          />\n        )}\n      </Suspense>\n    </>\n  );\n};\n\nexport default React.memo(NewCardReportListing);\n"],"names":["NewCardReportComponent","name","setShowExcelReportModal","setShowPDFReportModal","setShowReportModal","reportStartDate","setReportStartDate","reportEndDate","setReportEndDate","setFormData","dispatch","useDispatch","useState","paginatedData","userOffice","useSelector","state","auth","office","initialState","status","adSystem","bsSystem","startDate","Date","toLocaleDateString","endDate","quickReport","pdfReport","excelReport","district","validationSchema","Yup","shape","test","value","this","parent","adDate","undefined","length","bsToAd","convertedStartDate","nullable","onSubmit","values","formatedStartDate","dateFormater","formatedEndDate","body","id","type","reportConstants","getNewCardReport","getAllNewCardReport","className","style","paddingBottom","marginBottom","backgroundColor","padding","enableReinitialize","initialValues","formik","autoComplete","htmlFor","blurInputOnSelect","isClearable","isSearchable","inputId","getOptionLabel","option","getOptionValue","onChange","selected","setFieldValue","isDisabled","loadOptions","loadOptionsOffice","additional","offset","limit","component","TextError","options","statusTypes","e","target","checked","bsDate","label","language","dateFormat","format","Button","title","content","React","ReportModal","lazy","PDFReportModal","ExcelReportModal","NewCardReportListing","cards","report","formData","showReportModal","showPDFReportModal","showExcelReportModal","useEffect","getOrganization","Suspense","fallback"],"sourceRoot":""}