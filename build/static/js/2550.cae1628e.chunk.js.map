{"version":3,"file":"static/js/2550.cae1628e.chunk.js","mappings":"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","sources":["Component/Skeleton/UpdatedSkeleton.js","Pages/Role/Role.js","Pages/Role/CreateRole.js","Pages/Role/index.js","Redux/Role/api.js","Redux/Role/actions.js","Redux/Role/thunk.js","Redux/User/api.js","utils/redundant/user.js"],"sourcesContent":["import React from \"react\";\nimport Skeleton from \"react-loading-skeleton\";\nconst UpdatedSkeleton = () => {\n  return (\n    <>\n      <div className=\"mt-2\">\n        <Skeleton height={40} />\n        <Skeleton count={10} height={25} />\n      </div>\n      <div className=\"row d-flex mt-2\">\n        <div className=\"col-6\">\n          <Skeleton width={220} height={20} />\n        </div>\n        <div className=\"col-6 d-flex justify-content-end\">\n          <Skeleton width={200} height={30} />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default UpdatedSkeleton;\n","import React, { useState } from \"react\";\nimport { FaEdit } from \"react-icons/fa\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  getParticularPage,\n  editRole,\n  getPrevious,\n  getNext,\n} from \"../../Redux/Role/thunk\";\nimport Status from \"../../Component/Status\";\nimport Tooltip from \"../../Component/Tooltip/Tooltip\";\n\nimport PaginationBlock from \"../../Component/PaginationBlock\";\nimport NoData from \"../../Component/NoData/\";\n\nconst Role = ({\n  currentPage,\n  postsPerPage,\n  setCurrentPage,\n  count,\n  setShowModal,\n  maxPageNumberLimit,\n  setMaxPageNumberLimit,\n  minPageNumberLimit,\n  setMinPageNumberLimit,\n  search,\n}) => {\n  // props\n\n  const { permissions, isAdmin } = useSelector((state) => state.auth);\n  const isSuperuser = useSelector((state) => state.auth.isSuperuser);\n\n  const { roles, next, previous } = useSelector((state) => state.role);\n\n  const dispatch = useDispatch();\n\n  // for pagination\n  const [pageNumberLimit] = useState(5);\n\n  //change page\n  const paginate = (number) => {\n    dispatch(getParticularPage({ number, postsPerPage }));\n    setCurrentPage(number);\n  };\n\n  //handle Click\n  const handleClick = (type) => {\n    if (type === \"previous\") {\n      dispatch(getPrevious(previous));\n      setCurrentPage((prevState) => prevState - 1);\n      if ((currentPage - 1) % pageNumberLimit === 0) {\n        setMaxPageNumberLimit(maxPageNumberLimit - pageNumberLimit);\n        setMinPageNumberLimit(minPageNumberLimit - pageNumberLimit);\n      }\n    } else if (type === \"next\") {\n      dispatch(getNext(next));\n      setCurrentPage((prevState) => prevState + 1);\n      if (currentPage + 1 > maxPageNumberLimit) {\n        setMaxPageNumberLimit(maxPageNumberLimit + pageNumberLimit);\n        setMinPageNumberLimit(minPageNumberLimit + pageNumberLimit);\n      }\n    }\n  };\n\n  //pagination end\n\n  //sorting end\n\n  //edit function for the province\n  const handleEdit = (id) => {\n    dispatch(editRole(id));\n    setShowModal(true);\n  };\n  const addPermission = isAdmin || isSuperuser;\n  return (\n    <>\n      {roles?.length > 0 ? (\n        <div className=\"mt-2\">\n          <div className=\"table-scrollable\">\n            <table className=\"table table-hover table-bordered text-center\">\n              <thead>\n                <tr>\n                  <th scope=\"col\" style={{ width: \"8%\" }}>\n                    S.N\n                  </th>\n                  <th scope=\"col\">Name</th>\n\n                  <th scope=\"col\">Status</th>\n\n                  <th scope=\"col\">Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {roles?.length > 0 &&\n                  roles.map((user, i) => {\n                    const { id, name, email, isActive } = user;\n                    return (\n                      <tr key={id}>\n                        <th scope=\"row\" style={{ width: \"8%\" }}>\n                          {postsPerPage * (currentPage - 1) + (i + 1)}\n                        </th>\n                        <td>{name}</td>\n\n                        <td>\n                          <Status active={isActive} />\n                        </td>\n\n                        <td>\n                          {(isAdmin || isSuperuser) && (\n                            <Tooltip content=\"Edit\">\n                              <button\n                                className=\"btn btn-sm btn-edit btn-primary mx-1\"\n                                onClick={() => handleEdit(id)}\n                              >\n                                <FaEdit />\n                              </button>\n                            </Tooltip>\n                          )}\n                        </td>\n                      </tr>\n                    );\n                  })}\n              </tbody>\n            </table>\n          </div>\n          {count > 0 && (\n            <PaginationBlock\n              currentPage={currentPage}\n              postsPerPage={postsPerPage}\n              count={count}\n              paginate={paginate}\n              handleClick={handleClick}\n              setCurrentPage={setCurrentPage}\n              minPageNumberLimit={minPageNumberLimit}\n              maxPageNumberLimit={maxPageNumberLimit}\n            />\n          )}\n        </div>\n      ) : (\n        <NoData\n          search={search}\n          onClick={() => setShowModal(true)}\n          addPermission={addPermission}\n        />\n      )}\n    </>\n  );\n};\n\nexport default React.memo(Role);\n","import React, { useState, useEffect, Suspense, lazy } from \"react\";\n\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport Select from \"react-select\";\n\nimport TextError from \"../../Component/TextError/TextError\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { createRole, updateRole } from \"../../Redux/Role/thunk\";\nimport { errorFunction } from \"../../Component/Alert\";\nimport { checkRedundantDataUser } from \"../../utils/redundant/user\";\n\nimport Button from \"../../Component/Button/Button\";\n\nconst Permission = lazy(() => import(\"./Permission\"));\nconst CreateRole = ({ currentPage, loading, setShowModal, role, edit }) => {\n  const dispatch = useDispatch();\n  const [selectedPermissions, setSelectedPermissions] = useState([]);\n  const [holdPermissions, setHoldPermissions] = useState([]);\n\n  //initial state of the form\n  const initialState = {\n    name: edit ? role?.name : \"\",\n    permissions: edit ? (role ? role?.permissions : []) : [],\n    remarks: \"\",\n    isActive: edit ? role?.isActive : false,\n  };\n  //validation rules of the form\n  const validationSchema = Yup.object().shape({\n    name: Yup.string()\n      .required(\"First Name required\")\n      .min(3, \"First name must be at least 2 characters.\"),\n\n    isActive: Yup.bool(),\n    remarks: Yup.string(),\n  });\n\n  const onSubmit = async (values) => {\n    const {\n      name,\n\n      remarks,\n\n      isActive,\n    } = values;\n    const capitalName = name?.charAt(0).toUpperCase() + name?.slice(1);\n    const per = selectedPermissions.map((value) => value.id);\n    if (edit) {\n      const id = role.id;\n      const result = await dispatch(\n        updateRole(\n          id,\n          {\n            name: capitalName,\n            permissions: per,\n            isActive,\n            remarks,\n          },\n\n          currentPage\n        )\n      );\n      if (result) {\n        setShowModal(false);\n      } else {\n        setShowModal(true);\n      }\n    } else {\n      const result = await dispatch(\n        createRole(\n          {\n            name: capitalName,\n            permissions: per,\n            isActive,\n\n            remarks,\n          },\n          currentPage\n        )\n      );\n      if (result) {\n        setShowModal(false);\n      } else {\n        setShowModal(true);\n      }\n    }\n  };\n\n  // function which checks whether the bank is added already or not\n  const handleChange = async (e) => {\n    if (e.target.value.trim() && e.target.value !== \"\") {\n      const result = await checkRedundantDataUser(e);\n      result && errorFunction(\"Role with this name is already added \");\n    }\n  };\n\n  return (\n    <>\n      <div className=\"row justify-content-center mt-3\">\n        <div className=\"col-12\">\n          <div className=\"registration-process \">\n            <Formik\n              enableReinitialize={true}\n              initialValues={initialState}\n              validationSchema={validationSchema}\n              onSubmit={onSubmit}\n            >\n              {(formik) => {\n                const { setFieldValue } = formik;\n                return (\n                  <Form autoComplete=\"off\">\n                    <div className=\"form-group row mb-2 justify-content-center\">\n                      <div className=\" col-12\">\n                        <label htmlFor=\"name\" className=\"fw-bold float-start\">\n                          Role Name{\" \"}\n                          <strong className=\"text-danger ml-1\">*</strong>\n                        </label>\n                        <Field\n                          type=\"text\"\n                          name=\"name\"\n                          className=\"form-control \"\n                          placeholder=\"Role Name\"\n                        />\n                        <ErrorMessage name=\"name\" component={TextError} />\n                      </div>\n                    </div>\n\n                    <Permission\n                      selectedPermissions={selectedPermissions}\n                      setSelectedPermissions={setSelectedPermissions}\n                      holdPermissions={holdPermissions}\n                      setHoldPermissions={setHoldPermissions}\n                      role={role}\n                      edit={edit}\n                    />\n\n                    <div className=\"form-group row mb-2\">\n                      <div className=\"col-12 text-center\">\n                        <Field\n                          type=\"checkbox\"\n                          name=\"isActive\"\n                          id=\"isActive\"\n                          className=\"filled-in chk-col-blue\"\n                        />\n                        <label htmlFor=\"isActive\" className=\"fw-bold  mx-2\">\n                          {\" \"}\n                          Active\n                        </label>\n                      </div>\n                    </div>\n                    <div className=\"form-group text-center\">\n                      <Button\n                        type={\"btn\"}\n                        className={\"btn btn-primary\"}\n                        loading={loading}\n                        // disabled={lock || !formik.dirty}\n                        title={edit ? \"Update\" : \"Create\"}\n                        content={edit ? \"Update\" : \"Create\"}\n                      />\n                    </div>\n                  </Form>\n                );\n              }}\n            </Formik>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\nexport default React.memo(CreateRole);\n","import React, { useState, useEffect, lazy, Suspense } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport ListingSkeleton from \"../../Component/Skeleton/ListingSkeleton\";\nimport { clearRole, getRole, handleSearch } from \"../../Redux/Role/thunk\";\nimport Role from \"./Role\";\nimport { defaultLimit } from \"../../utils/defaultLimit\";\nimport { FaPlus } from \"react-icons/fa\";\nimport PaginationLimit from \"../../Component/Pagination/PaginationLimit\";\nimport Tooltip from \"../../Component/Tooltip/Tooltip\";\nimport UpdatedSkeleton from \"../../Component/Skeleton/UpdatedSkeleton\";\n\nimport CreateRole from \"./CreateRole\";\nimport Modal from \"../../Component/Modal\";\n\nconst RoleListing = () => {\n  const permissions = useSelector((state) => state.auth.permissions);\n  const isAdmin = useSelector((state) => state.auth.isAdmin);\n  const isSuperuser = useSelector((state) => state.auth.isSuperuser);\n  const { roles, role, edit, loading, count, loadingUpdated } = useSelector(\n    (state) => state.role\n  );\n  const { search } = useSelector((state) => state.search);\n\n  const dispatch = useDispatch();\n\n  // for pagination\n  const [showModal, setShowModal] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [maxPageNumberLimit, setMaxPageNumberLimit] = useState(5);\n  const [minPageNumberLimit, setMinPageNumberLimit] = useState(0);\n  const [postsPerPage, setPostsPerPage] = useState(10);\n\n  //pagination end\n  //loading all the food\n  useEffect(() => {\n    if (postsPerPage === 0) {\n      if (search === \"\") {\n        dispatch(getRole(count));\n      } else {\n        dispatch(handleSearch(search, count));\n      }\n    } else {\n      if (search === \"\") {\n        if (postsPerPage === defaultLimit) {\n          dispatch(getRole(postsPerPage));\n        } else {\n          setCurrentPage(1);\n          dispatch(getRole(postsPerPage));\n        }\n      } else {\n        setCurrentPage(1);\n        setMaxPageNumberLimit(5);\n        setMinPageNumberLimit(0);\n        dispatch(handleSearch(search, postsPerPage));\n      }\n    }\n  }, [dispatch, postsPerPage, search]);\n\n  return (\n    <>\n      <div className=\"user-card\">\n        <div className=\"header-content\">\n          <h4 className=\"mb-sm-0 fw-normal\">Roles Listing</h4>\n        </div>\n        <div\n          className={`${roles?.length > 0 ? \"office-card-body\" : \"card-body\"}`}\n        >\n          <div className=\"row m-0 p-0\">\n            {roles?.length > 0 && (\n              <>\n                <div className=\"col-6\">\n                  <PaginationLimit\n                    postsPerPage={postsPerPage}\n                    setPostsPerPage={setPostsPerPage}\n                  />\n                </div>\n                <div className=\"col-6 text-right\">\n                  {isAdmin && isSuperuser && (\n                    <Tooltip content=\"Add\">\n                      <button\n                        type=\"button\"\n                        className=\"btn btn-primary waves-effect waves-light btn-sm float-end\"\n                        onClick={() => setShowModal(true)}\n                      >\n                        <FaPlus className=\"mb-1\" />\n                        &nbsp;Add New\n                      </button>\n                    </Tooltip>\n                  )}\n                </div>\n              </>\n            )}\n          </div>\n          {loading && <ListingSkeleton />}\n          {loadingUpdated && <UpdatedSkeleton />}\n          {!loading && !loadingUpdated && (\n            <Role\n              currentPage={currentPage}\n              setCurrentPage={setCurrentPage}\n              postsPerPage={postsPerPage}\n              setPostsPerPage={setPostsPerPage}\n              count={count}\n              maxPageNumberLimit={maxPageNumberLimit}\n              setMaxPageNumberLimit={setMaxPageNumberLimit}\n              minPageNumberLimit={minPageNumberLimit}\n              setMinPageNumberLimit={setMinPageNumberLimit}\n              search={search}\n              setShowModal={setShowModal}\n            />\n          )}\n\n          {showModal && (\n            <Suspense fallback={<div></div>}>\n              <Modal\n                header={edit ? \"Edit Role\" : \"Role\"}\n                types={\"role\"}\n                size={\"modal-xl\"}\n                setShowModal={setShowModal}\n                showModal={showModal}\n                edit={edit}\n                clearAction={clearRole}\n              >\n                <CreateRole\n                  setShowModal={setShowModal}\n                  showModal={showModal}\n                  edit={edit}\n                  role={role}\n                  currentPage={currentPage}\n                />\n              </Modal>\n            </Suspense>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default RoleListing;\n","import axiosInstance from \"../../utils/axios\";\nconst roleURL = \"auth/groups\";\nexport const getRole = (postsPerPage) =>\n  axiosInstance.get(`${roleURL}?offset=0&limit=${postsPerPage}&ordering=-id`);\n\nexport const getAllRole = () => axiosInstance.get(`${roleURL}?ordering=-id`);\n\nexport const getParticularPage = (number, postsPerPage) =>\n  axiosInstance.get(\n    `${roleURL}?offset=${\n      (number - 1) * postsPerPage\n    }&limit=${postsPerPage}&ordering=-id`\n  );\n\nexport const getNext = (next) => axiosInstance.get(next);\n\nexport const getPrevious = (previous) => axiosInstance.get(previous);\n\nexport const handleSearch = (search, postsPerPage) =>\n  axiosInstance.get(\n    `${roleURL}?offset=0&limit=${postsPerPage}&search=${search}`\n  );\n\nexport const createRole = (body) =>\n  axiosInstance.post(`auth/group/create`, body);\n\nexport const editRole = (id) => axiosInstance.get(`auth/groups/${id}`);\n\n//update function\nexport const updateRole = (id, body) =>\n  axiosInstance.patch(`${roleURL}/${id}`, body);\n\nexport const getAllPermission = () => {\n  return axiosInstance.get(`auth/permissions?limit=0&search=`);\n};\n","import { roleConstants } from \"./constants\";\n// actions\nexport const loadingAction = () => ({\n  type: roleConstants.LOADING_ROLE,\n});\n\nexport const loadingUpdateAction = () => ({\n  type: roleConstants.LOADING_UPDATE_ROLE,\n});\n\nexport const getRoleSuccessAction = (data) => ({\n  type: roleConstants.GET_ROLE_SUCCESS,\n  payload: data,\n});\n\nexport const getRoleFailAction = (error) => ({\n  type: roleConstants.GET_ROLE_FAIL,\n  payload: error,\n});\nexport const getAllRoleSuccessAction = (data) => ({\n  type: roleConstants.GET_ALL_ROLE_SUCCESS,\n  payload: data,\n});\n\nexport const getAllRoleFailAction = (error) => ({\n  type: roleConstants.GET_ALL_ROLE_FAIL,\n  payload: error,\n});\n\nexport const createRoleSuccessAction = (data) => ({\n  type: roleConstants.CREATE_ROLE_SUCCESS,\n  payload: data,\n});\n\nexport const createRoleFailAction = (error) => ({\n  type: roleConstants.CREATE_ROLE_FAIL,\n  payload: error,\n});\nexport const editRoleAction = (data) => ({\n  type: roleConstants.GET_EDIT_ROLE,\n  payload: data,\n});\n\nexport const updateRoleSuccessAction = (data) => ({\n  type: roleConstants.UPDATE_ROLE_SUCCESS,\n  payload: data,\n});\n\nexport const updateRoleFailAction = (error) => ({\n  type: roleConstants.UPDATE_ROLE_FAIL,\n  payload: error,\n});\n\nexport const loadingPermissionAction = () => ({\n  type: roleConstants.LOADING_PERMISSIONS,\n});\n\nexport const getAllPermissionSuccessAction = (data) => ({\n  type: roleConstants.GET_ALL_PERMISSION_SUCCESS,\n  payload: data,\n});\n\nexport const getAllPermissionFailAction = (error) => ({\n  type: roleConstants.GET_ALL_PERMISSION_FAIL,\n  payload: error,\n});\n\nexport const clearRoleAction = (error) => ({\n  type: roleConstants.CLEAR_DATA,\n});\n","import * as API from \"./api\";\nimport * as action from \"./actions\";\nimport { errorFunction, successFunction } from \"../../Component/Alert\";\n\n//get  Bank\nexport const getRole = (postsPerPage) => async (dispatch) => {\n  try {\n    dispatch(action.loadingAction());\n    const { data } = await API.getRole(postsPerPage);\n\n    dispatch(action.getRoleSuccessAction(data));\n    return true;\n  } catch (error) {\n    dispatch(action.getRoleFailAction(error));\n    errorFunction(error);\n  }\n};\n// get all bank\nexport const getAllRole = () => async (dispatch) => {\n  try {\n    dispatch(action.loadingAction());\n    const { data } = await API.getAllRole();\n\n    dispatch(action.getAllRoleSuccessAction(data));\n  } catch (error) {\n    dispatch(action.getAllRoleFailAction(error));\n    errorFunction(error);\n  }\n};\n//get previous  page\nexport const getPrevious = (previous) => async (dispatch) => {\n  try {\n    dispatch(action.loadingAction());\n    const { data } = await API.getPrevious(previous);\n\n    dispatch(action.getRoleSuccessAction(data));\n  } catch (error) {\n    dispatch(action.getRoleFailAction(error));\n    errorFunction(error);\n  }\n};\n//get next  page\nexport const getNext = (next) => async (dispatch) => {\n  try {\n    dispatch(action.loadingAction());\n    const { data } = await API.getNext(next);\n\n    dispatch(action.getRoleSuccessAction(data));\n  } catch (error) {\n    dispatch(action.getRoleFailAction(error));\n    errorFunction(error);\n  }\n};\n//get particular page\nexport const getParticularPage =\n  ({ number, postsPerPage }) =>\n  async (dispatch) => {\n    try {\n      dispatch(action.loadingAction());\n      const { data } = await API.getParticularPage(number, postsPerPage);\n\n      dispatch(action.getRoleSuccessAction(data));\n    } catch (error) {\n      dispatch(action.getRoleFailAction(error));\n      errorFunction(error);\n    }\n  };\n\nexport const createRole = (value, currentPage) => async (dispatch) => {\n  const { name, permissions, isActive } = value;\n  try {\n    dispatch(action.loadingAction());\n   \n    const body = JSON.stringify({ name, permissions, isActive });\n\n    await API.createRole(body);\n\n    successFunction(\"Role created successfully \");\n    dispatch(getParticularPage({ currentPage, postsPerPage: 10 }));\n    return true;\n  } catch (error) {\n    dispatch(action.createRoleFailAction(error));\n    errorFunction(\"Failed to create Role.\");\n  }\n};\n\n// Edit  bank\nexport const editRole = (id) => async (dispatch) => {\n  try {\n    // dispatch(action.loadingAction());\n    const { data } = await API.editRole(id);\n\n    dispatch(action.editRoleAction(data));\n    return true;\n  } catch (error) {\n    // dispatch(action.editRoleFailAction(error));\n    errorFunction(\"Failed to delete Role \");\n  }\n};\n//update\nexport const updateRole = (id, values, currentPage) => async (dispatch) => {\n  const { name, permissions, remarks, isActive } = values;\n  try {\n    dispatch(action.loadingUpdateAction());\n\n    const body = JSON.stringify({ name, permissions, remarks, isActive });\n\n    dispatch(action.loadingUpdateAction());\n\n    const { data } = await API.updateRole(id, body);\n\n    successFunction(\"Role Updated Successfully \");\n    dispatch(getParticularPage({ currentPage, commonData: 10 }));\n    return true;\n  } catch (error) {\n    dispatch(action.updateRoleFailAction(error));\n    errorFunction(\"Failed to Update Role\");\n  }\n};\n//handle Search\nexport const handleSearch = (search, postsPerPage) => async (dispatch) => {\n  try {\n    dispatch(action.loadingAction());\n    const { data } = await API.handleSearch(search, postsPerPage);\n    dispatch(action.getRoleSuccessAction(data));\n  } catch (error) {\n    dispatch(action.getRoleFailAction(error));\n    errorFunction(error);\n  }\n};\nexport const clearRole = () => async (dispatch) => {\n  try {\n    dispatch(action.clearRoleAction());\n    return true;\n  } catch (error) {\n    errorFunction(error);\n  }\n};\n\nexport const getAllPermission = () => async (dispatch) => {\n  try {\n    dispatch(action.loadingPermissionAction());\n    const { data } = await API.getAllPermission();\n    dispatch(action.getAllPermissionSuccessAction(data));\n    return true;\n  } catch (error) {\n    dispatch(action.getAllPermissionFailAction(error));\n    errorFunction(error);\n  }\n};\n","import axiosInstance from \"../../utils/axios\";\n\n//obtaining the paginated data\nexport const getUser = (postsPerPage) =>\n  axiosInstance.get(\n    `api/v1/core-app/users/list?offset=0&limit=${postsPerPage}&ordering=-id`\n  );\n\n//obtaining all data\nexport const getAllUser = () =>\n  axiosInstance.get(`api/v1/core-app/users/list?ordering=-id`);\n\nexport const getCurrentUser = (decoded) =>\n  axiosInstance.get(`api/v1/core-app/users/list/${decoded.user_id}`);\n//obtaining the previous page data from paginated data\nexport const getPrevious = (previous) => axiosInstance.get(previous);\n\n//obtaining the next page data from paginated data\nexport const getNext = (next) => axiosInstance.get(next);\n\n//obtaining the particular page data from paginated data\nexport const getPageUser = (number, postsPerPage) =>\n  axiosInstance.get(\n    `api/v1/core-app/users/list?offset=${\n      (number - 1) * postsPerPage\n    }&limit=${postsPerPage}&ordering=-id`\n  );\n\n//creating function\nexport const createUser = (body) =>\n  axiosInstance.post(`api/v1/core-app/user`, body);\n\n//deleting function\nexport const deleteUser = (id) =>\n  axiosInstance.delete(`api/v1/core-app/user/${id}`);\n\n//update function\nexport const updateUser = (id, body) =>\n  axiosInstance.patch(`api/v1/core-app/user/${id}`, body);\n\n//searching function\nexport const handleSearch = (search, postsPerPage) =>\n  axiosInstance.get(\n    `api/v1/core-app/users/list?offset=0&limit=${postsPerPage}&search=${search}`\n  );\n\n// checking the redundant data\nexport const checkRedundantData = (e, cancelToken) =>\n  axiosInstance.get(\n    `api/v1/core-app/users/list?username=${e.target.value.trim()}`,\n    {\n      cancelToken: cancelToken.token,\n    }\n  );\nexport const checkRedundantEmployeeID = (e, cancelToken) =>\n  axiosInstance.get(\n    `api/v1/core-app/users/list?employee_id=${e.target.value.trim()}`,\n    {\n      cancelToken: cancelToken.token,\n    }\n  );\n//deleting the image\nexport const handleDelete = (id, body) =>\n  axiosInstance.patch(`api/v1/core-app/user/${id}`, body);\n\n//change password\nexport const changeUserPassword = (id, password) =>\n  axiosInstance.patch(`/auth/change-password/${id}`, { password });\n","import axios from \"axios\";\nimport {\n  checkRedundantData,\n  checkRedundantEmployeeID,\n} from \"../../Redux/User/api\";\nlet cancelToken;\nexport const checkRedundantDataUser = async (e) => {\n  //Check if there are any previous pending requests\n  if (typeof cancelToken !== typeof undefined) {\n    cancelToken.cancel(\"Operation canceled due to new request.\");\n  }\n  //Save the cancel token for the current request\n  cancelToken = axios.CancelToken.source();\n  try {\n    const { data } = await checkRedundantData(e, cancelToken);\n    if (data.data.length > 0) {\n      return true;\n    }\n    if (data.data.length <= 0) {\n      return false;\n    }\n  } catch (error) {}\n};\n\nexport const checkRedundantDataID = async (e) => {\n  //Check if there are any previous pending requests\n  if (typeof cancelToken !== typeof undefined) {\n    cancelToken.cancel(\"Operation canceled due to new request.\");\n  }\n  //Save the cancel token for the current request\n  cancelToken = axios.CancelToken.source();\n  try {\n    const { data } = await checkRedundantEmployeeID(e, cancelToken);\n    if (data.data.length > 0) {\n      return true;\n    }\n    if (data.data.length <= 0) {\n      return false;\n    }\n  } catch (error) {}\n};\n"],"names":["className","height","count","width","Role","currentPage","postsPerPage","setCurrentPage","setShowModal","maxPageNumberLimit","setMaxPageNumberLimit","minPageNumberLimit","setMinPageNumberLimit","search","useSelector","state","auth","isAdmin","permissions","isSuperuser","role","roles","next","previous","dispatch","useDispatch","useState","pageNumberLimit","addPermission","length","scope","style","map","user","i","id","name","isActive","email","Status","active","Tooltip","content","onClick","editRole","handleEdit","PaginationBlock","paginate","number","getParticularPage","handleClick","type","getPrevious","prevState","getNext","NoData","React","Permission","lazy","CreateRole","loading","edit","selectedPermissions","setSelectedPermissions","holdPermissions","setHoldPermissions","initialState","remarks","validationSchema","Yup","shape","required","min","onSubmit","values","capitalName","charAt","toUpperCase","slice","per","value","updateRole","result","createRole","enableReinitialize","initialValues","formik","setFieldValue","autoComplete","htmlFor","placeholder","component","TextError","Button","title","loadingUpdated","showModal","setPostsPerPage","useEffect","getRole","handleSearch","defaultLimit","PaginationLimit","ListingSkeleton","UpdatedSkeleton","Suspense","fallback","Modal","header","types","size","clearAction","clearRole","roleURL","axiosInstance","body","loadingAction","roleConstants","loadingUpdateAction","getRoleSuccessAction","data","payload","getRoleFailAction","error","editRoleAction","getAllPermissionSuccessAction","action","API","errorFunction","JSON","stringify","successFunction","commonData","getAllPermission","getUser","getPageUser","createUser","updateUser","checkRedundantData","e","cancelToken","target","trim","token","changeUserPassword","password","checkRedundantDataUser","cancel","axios"],"sourceRoot":""}